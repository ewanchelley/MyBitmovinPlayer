// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-tvos14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BitmovinPlayerCore
import AVFoundation
import AVKit
@_exported import BitmovinPlayerCore
import Combine
import CommonCrypto
import Foundation
import GroupActivities
import MediaPlayer
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPUIDeviceVersionHelper) @objcMembers public class _UIDeviceVersionHelper : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc public func isSystemVersionGreaterThanOrEqual(_ versionToCheck: Swift.Double) -> Swift.Bool
  @objc public func isSystemVersionLessThan(_ versionToCheck: Swift.Double) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlayerActiveEvent) public class PlayerActiveEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalSourceRemovedEvent) @objcMembers public class _InternalSourceRemovedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(BMPFairplayLicenseAcquiredEvent) @objcMembers public class FairplayLicenseAcquiredEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let contentKeyRequest: BitmovinPlayerCore.FairplayContentKeyRequest
  @objc public init(contentKeyRequest: BitmovinPlayerCore.FairplayContentKeyRequest)
  @objc deinit
}
@objcMembers @objc public class _BMPAVPlayer : AVFoundation.AVQueuePlayer {
  @objc override dynamic public var currentItem: BitmovinPlayerCore._BMPAVPlayerItem? {
    @objc get
  }
  @objc override dynamic public init()
  @objc(seekToTime:toleranceBefore:toleranceAfter:suppressEvents:completionHandler:) public func seek(time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, suppressEvents: Swift.Bool, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to date: Foundation.Date, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func seek(to date: Foundation.Date, suppressEvents: Swift.Bool, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to date: Foundation.Date)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc public func cancelPendingSeeks()
  @objc deinit
}
@objcMembers @objc(BMPPlayReadyConfig) final public class PlayReadyConfig : BitmovinPlayerCore.DrmConfig, @unchecked Swift.Sendable {
  @objc final public var licenseRequestHeaders: [Swift.String : Swift.String]
  @objc final public var licenseRequestRetryDelay: Swift.UInt
  @objc final public var maxLicenseRequestRetries: Swift.UInt
  @objc final public var mediaKeySystemConfig: Swift.String?
  @objc(initWithLicenseUrl:) public init(license licenseUrl: Foundation.URL?)
  @objc deinit
}
@objc(_BMPSeekingService) public protocol _SeekingService {
  @objc var wasTimeChangeCommandCalled: Swift.Bool { get }
  @objc var isSeekingBackToStart: Swift.Bool { get }
  @objc var isSeeking: Swift.Bool { get }
  @objc(seekToSource:time:suppressEvents:) func seek(to source: any BitmovinPlayerCore.Source, time: Foundation.TimeInterval, suppressEvents: Swift.Bool)
  @objc(timeShift:suppressEvents:) func timeShift(to time: Foundation.TimeInterval, suppressEvents: Swift.Bool)
  @objc func seekBackToStartIfNeeded(completion: (() -> Swift.Void)?)
  @objc func adjustToTargetStartTime(_ startTime: Foundation.TimeInterval, completionHandler: ((Swift.Bool) -> Swift.Void)?)
  @objc func setReplayMode(_ replayMode: BitmovinPlayerCore.ReplayMode)
}
@objc(BMPMetadataType) public enum MetadataType : Swift.Int {
  case none = 0
  case ID3
  case EMSG
  case daterange
  case scte
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(BMPPlayerEventsApi) public class PlayerEventsApi : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.PlayerEventsApi {
  public func on<T>(_ eventType: T.Type) -> Combine.AnyPublisher<T, Swift.Never> where T : BitmovinPlayerCore.PlayerEvent
  public func on<T>(_ eventType: T.Type) -> Combine.AnyPublisher<T, Swift.Never> where T : BitmovinPlayerCore.SourceEvent
}
@objc(BMPSource) public protocol Source : BitmovinPlayerCore.SourceEventHandler, Swift.Sendable {
  @objc var sourceConfig: BitmovinPlayerCore.SourceConfig { get }
  @objc var isAttachedToPlayer: Swift.Bool { get }
  @objc var isActive: Swift.Bool { get }
  @objc var duration: Foundation.TimeInterval { get }
  @objc var loadingState: BitmovinPlayerCore.LoadingState { get }
  @objc var metadata: [Swift.String : Swift.AnyObject]? { get set }
  @objc @available(tvOS 14.0, *)
  @available(iOS, unavailable)
  var markers: [any BitmovinPlayerCore.TimelineMarker] { get set }
  @objc var _modules: BitmovinPlayerCore._SourceModulesApi { get }
  @objc var events: BitmovinPlayerCore.SourceEventsApi { get }
  @objc var drm: BitmovinPlayerCore.SourceDrmApi { get }
  @objc var latency: BitmovinPlayerCore.SourceLatencyApi { get }
  @objc func thumbnail(forTime time: Foundation.TimeInterval) -> BitmovinPlayerCore.Thumbnail?
}
@objcMembers @objc(BMPAdManifestLoadEvent) open class AdManifestLoadEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let adConfig: (any BitmovinPlayerCore.AdConfig)?
  @objc final public let adBreak: (any BitmovinPlayerCore.AdBreak)?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(adConfig: (any BitmovinPlayerCore.AdConfig)?, adBreak: (any BitmovinPlayerCore.AdBreak)?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(BMPUnstallingBehaviour) public enum UnstallingBehaviour : Swift.UInt {
  case relaxed = 0
  case aggressive = 1
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(BMPSourceConfig) open class SourceConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public let url: Foundation.URL
  @objc final public let type: BitmovinPlayerCore.SourceType
  @objc public var title: Swift.String?
  @objc public var sourceDescription: Swift.String?
  @objc public var posterSource: Foundation.URL?
  @objc public var isPosterPersistent: Swift.Bool
  @objc public var labelingConfig: BitmovinPlayerCore.LabelingConfig
  @objc public var drmConfig: BitmovinPlayerCore.DrmConfig?
  @objc public var tracks: [BitmovinPlayerCore.Track] {
    get
  }
  @objc public var thumbnailTrack: BitmovinPlayerCore.ThumbnailTrack?
  @nonobjc public var metadata: [Swift.String : Any]
  @objc public var options: BitmovinPlayerCore.SourceOptions
  @objc @available(tvOS 14.0, *)
  @available(iOS, unavailable)
  public var markers: [any BitmovinPlayerCore.TimelineMarker] {
    @objc get
    @objc set
  }
  @objc public var liveConfig: BitmovinPlayerCore.SourceLiveConfig
  @objc convenience public init?(url: Foundation.URL)
  @objc convenience public init(url: Foundation.URL, type: BitmovinPlayerCore.SourceType)
  @objc(addSubtitleTrack:) public func add(subtitleTrack: BitmovinPlayerCore.SubtitleTrack)
  @objc deinit
}
extension BitmovinPlayerCore.SourceConfig {
  @objc(metadata) dynamic public var _metadata: Foundation.NSMutableDictionary {
    @objc get
    @objc set
  }
}
@objc(_BMPAdPlayerManager) public protocol _AdPlayerManager {
  @objc var delegate: (any BitmovinPlayerCore._AdPlayerManagerDelegate)? { get set }
  @objc var isAd: Swift.Bool { get }
  @objc var isMuted: Swift.Bool { get }
  @objc var isPlaying: Swift.Bool { get }
  @objc var isPaused: Swift.Bool { get }
  @objc var currentTime: Foundation.TimeInterval { get }
  @objc var duration: Foundation.TimeInterval { get }
  @objc func skipAd()
  @objc func skipAdBreak()
  @objc func discardAdBreaks(betweenTime startTime: Foundation.TimeInterval, andTime endTime: Foundation.TimeInterval)
  @objc func register(adContainer: UIKit.UIView)
  @objc func adShouldPlay(scheduledAdItem: BitmovinPlayerCore._ScheduledAdItem)
  @objc func play()
  @objc func pause()
  @objc func mute()
  @objc func unmute()
  @objc func destroy()
  @objc func set(volume: Swift.Int)
}
@objc(BMPTrackType) public enum TrackType : Swift.Int {
  case none
  case text
  case thumbnail
  case audio
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class _BMPUrlRequestResult : ObjectiveC.NSObject {
  @objc final public let data: Foundation.Data
  @objc final public let response: Foundation.HTTPURLResponse
  @objc final public let request: Foundation.URLRequest
  @objc public init(data: Foundation.Data, response: Foundation.HTTPURLResponse, request: Foundation.URLRequest)
  @objc deinit
}
@objc(BMPCueEvent) public protocol CueEvent {
  @objc var startTime: Foundation.TimeInterval { get }
  @objc var endTime: Foundation.TimeInterval { get }
  @objc var text: Swift.String? { get }
  @objc var rawText: Swift.String? { get }
  @objc var attributedText: Foundation.NSAttributedString? { get }
  @objc var html: Swift.String? { get }
  @objc var image: UIKit.UIImage? { get }
  @objc var position: BitmovinPlayerCore.CuePosition? { get }
  @objc var region: Swift.String? { get }
  @objc var regionStyle: Swift.String? { get }
  @objc var vtt: BitmovinPlayerCore.VttProperties? { get }
}
@objc(BMPUserInterfaceType) public enum UserInterfaceType : Swift.Int {
  @available(tvOS, unavailable)
  case bitmovin
  case system
  case subtitle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(BMPAdManifestLoadedEvent) open class AdManifestLoadedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let downloadTime: Foundation.TimeInterval
  @objc final public let adConfig: (any BitmovinPlayerCore.AdConfig)?
  @objc final public let adBreak: (any BitmovinPlayerCore.AdBreak)?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(downloadTime: Foundation.TimeInterval, adBreak: (any BitmovinPlayerCore.AdBreak)?, adConfig: (any BitmovinPlayerCore.AdConfig)?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPImaSettings) @objcMembers public class ImaSettings : ObjectiveC.NSObject, Foundation.NSCopying, @unchecked Swift.Sendable {
  @objc public var ppid: Swift.String?
  @objc public var language: Swift.String
  @objc public var maxRedirects: Swift.UInt
  @objc public var enableBackgroundPlayback: Swift.Bool
  @objc @available(*, deprecated, message: "To enable the Now Playing information use `NowPlayingConfig.isNowPlayingInfoEnabled`")
  public var disableNowPlayingInfo: Swift.Bool
  @objc public var playerVersion: Swift.String?
  @objc public var sessionId: Swift.String?
  @objc @available(tvOS, unavailable)
  public var sameAppKeyEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(tvOS, unavailable)
  public static func _create(ppid: Swift.String?, language: Swift.String, maxRedirects: Swift.UInt, enableBackgroundPlayback: Swift.Bool, disableNowPlayingInfo: Swift.Bool, playerVersion: Swift.String?, sessionId: Swift.String?, sameAppKeyEnabled: Swift.Bool) -> BitmovinPlayerCore.ImaSettings
  @objc @available(tvOS 14.0, *)
  @available(iOS, unavailable)
  public static func _create(ppid: Swift.String?, language: Swift.String, maxRedirects: Swift.UInt, enableBackgroundPlayback: Swift.Bool, disableNowPlayingInfo: Swift.Bool, playerVersion: Swift.String?, sessionId: Swift.String?) -> BitmovinPlayerCore.ImaSettings
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalBufferLevelChangedEvent) final public class _InternalBufferLevelChangedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let forwardBufferLevel: BitmovinPlayerCore.BufferLevel
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalSourcePlaybackFinishedEvent) public class _InternalSourcePlaybackFinishedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPNetworkConfig) public class NetworkConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  public typealias PreprocessHttpRequestHandler = (_ type: BitmovinPlayerCore.HttpRequestType, _ request: BitmovinPlayerCore.HttpRequest, _ completionHandler: @escaping (_ request: BitmovinPlayerCore.HttpRequest) -> Swift.Void) -> Swift.Void
  public typealias RetryHandler = (_ retryDelay: Foundation.TimeInterval, _ request: BitmovinPlayerCore.HttpRequest) -> Swift.Void
  public typealias AbortHandler = () -> Swift.Void
  public typealias RetryHttpRequestHandler = (_ type: BitmovinPlayerCore.HttpRequestType, _ retry: Swift.Int, _ response: BitmovinPlayerCore.HttpResponse, _ retryHandler: @escaping BitmovinPlayerCore.NetworkConfig.RetryHandler, _ abortHandler: @escaping BitmovinPlayerCore.NetworkConfig.AbortHandler) -> Swift.Void
  public typealias PreprocessHttpResponseHandler = (_ type: BitmovinPlayerCore.HttpRequestType, _ response: BitmovinPlayerCore.HttpResponse, _ completionHandler: @escaping (_ response: BitmovinPlayerCore.HttpResponse) -> Swift.Void) -> Swift.Void
  @objc @available(*, deprecated, message: "Use preprocessHttpRequest instead.")
  weak public var preprocessHttpRequestDelegate: (any BitmovinPlayerCore.PreprocessHttpRequestDelegate)?
  @objc public var preprocessHttpRequest: BitmovinPlayerCore.NetworkConfig.PreprocessHttpRequestHandler?
  @objc public var retryHttpRequest: BitmovinPlayerCore.NetworkConfig.RetryHttpRequestHandler?
  @objc public var preprocessHttpResponse: BitmovinPlayerCore.NetworkConfig.PreprocessHttpResponseHandler?
  @objc override dynamic public init()
  @objc deinit
}
@_Concurrency.MainActor @objc(BMPFullscreenHandler) public protocol FullscreenHandler : ObjectiveC.NSObjectProtocol {
  @objc @_Concurrency.MainActor var isFullscreen: Swift.Bool { get }
  @objc @_Concurrency.MainActor func onFullscreenRequested()
  @objc @_Concurrency.MainActor func onFullscreenExitRequested()
}
@objc @_inheritsConvenienceInitializers public class PictureInPictureExitedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.PictureInPictureExitedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objcMembers @objc(BMPSourceUnloadedEvent) public class SourceUnloadedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc public init(source: any BitmovinPlayerCore.Source)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultPlaylistManipulator) public class _DefaultPlaylistManipulator : ObjectiveC.NSObject, BitmovinPlayerCore._PlaylistManipulator {
  @objc public func replace(decryptionKeyUrl keyUrl: Swift.String, with keyData: Foundation.Data, in playlist: Swift.String, decryptionKeyStoreStrategy keyStoreStrategy: any BitmovinPlayerCore._PlaylistDecryptionKeyStoreStrategy) -> Swift.String
  @objc public func replace(manifestUrl url: Swift.String, with customUrl: Swift.String, in playlist: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPLogger) public protocol Logger {
  @objc var level: BitmovinPlayerCore.LogLevel { get set }
  @objc func log(_ logEntry: BitmovinPlayerCore.LogEntry)
}
@_inheritsConvenienceInitializers @objc(BMPBitmovinAdvertisingConfig) @objcMembers public class BitmovinAdvertisingConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var macro: BitmovinPlayerCore.VastMacroConfig
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalVariantPlaylistLoadedEvent) @objcMembers final public class _InternalVariantPlaylistLoadedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: Foundation.Data
  @objc final public let url: Foundation.URL
  @objc convenience public init(data: Foundation.Data, requestUrl: Foundation.URL)
  @objc deinit
}
@available(*, deprecated, message: "Warnings are now communicated through logs with level `.warning`. These logs are printed to the console by default. You can also access them by providing your own logger to `DebugConfig.logging.logger`\"")
@objcMembers @objc(BMPSourceWarningEvent) public class SourceWarningEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let code: BitmovinPlayerCore.SourceWarning.Code
  @objc final public let message: Swift.String
  @objc final public let data: BitmovinPlayerCore.DeficiencyData?
  @objc public init(code: BitmovinPlayerCore.SourceWarning.Code, message: Swift.String, data: BitmovinPlayerCore.DeficiencyData?)
  @objc deinit
}
extension BitmovinPlayerCore.SourceWarningEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_hasMissingDesignatedInitializers @available(tvOS, unavailable)
@objcMembers @objc(BMPImaAdAttributionUiMode) public class ImaAdAttributionUiMode : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public static var imaDefault: BitmovinPlayerCore.ImaAdAttributionUiMode {
    @objc get
  }
  @objc public static var noAttribution: BitmovinPlayerCore.ImaAdAttributionUiMode {
    @objc get
  }
  @objc public static func attribution(countdown: Swift.Bool) -> BitmovinPlayerCore.ImaAdAttributionUiMode
  @objc final public let _isDefault: Swift.Bool
  @objc final public let _showAttribution: Swift.Bool
  @objc final public let _showCountdown: Swift.Bool
  @objc deinit
}
@objc(_BMPPlaylistService) public protocol _PlaylistService {
  @objc(loadPlaylistConfig:) func load(playlistConfig: BitmovinPlayerCore.PlaylistConfig)
  @objc func add(source: any BitmovinPlayerCore.Source, at index: Swift.Int)
  @objc func add(source: any BitmovinPlayerCore.Source)
  @objc func remove(sourceAt index: Swift.Int)
  @objc func unload()
}
@_inheritsConvenienceInitializers @objc(BMPSourceDrmApi) @objcMembers public class SourceDrmApi : ObjectiveC.NSObject {
  @objc final public let fairplay: BitmovinPlayerCore.SourceDrmFairplayApi
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @objcMembers public class _BMPRetryResult : ObjectiveC.NSObject {
  @objc final public let retry: Swift.Bool
  @objc final public let delay: Foundation.TimeInterval
  @objc final public let modifiedRequest: Foundation.URLRequest?
  @objc convenience public init(delay: Foundation.TimeInterval)
  @objc convenience public init(retry: Swift.Bool)
  @objc convenience public init(modifiedRequest: Foundation.URLRequest)
  @objc convenience public init(delay: Foundation.TimeInterval, modifiedRequest: Foundation.URLRequest)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPPlayEvent) @objcMembers public class PlayEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let time: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStallEndedEvent) public class StallEndedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPVttPosition) @objcMembers final public class VttPosition : ObjectiveC.NSObject {
  @objc final public let type: BitmovinPlayerCore.VttPositionValueType
  @objc final public let value: Swift.Double
  @objc public static func _create(type: BitmovinPlayerCore.VttPositionValueType, value: Swift.Double) -> BitmovinPlayerCore.VttPosition
  @objc deinit
}
extension BitmovinPlayerCore.VttPosition : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(BMPRemoteControlType) public enum RemoteControlType : Swift.Int {
  case cast
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(BMPScteMetadataEntry) final public class ScteMetadataEntry : ObjectiveC.NSObject, BitmovinPlayerCore.MetadataEntry {
  @objc final public let key: Swift.String
  @objc final public let value: Swift.String?
  @objc final public var metadataType: BitmovinPlayerCore.MetadataType {
    @objc get
  }
  @objc public init(key: Swift.String, value: Swift.String?)
  @objc deinit
}
@objc(BMPPlayerViewEvent) public protocol PlayerViewEvent : BitmovinPlayerCore.Event {
}
@objcMembers @objc(BMPAirPlayChangedEvent) public class AirPlayChangedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let isAirPlayActive: Swift.Bool
  @objc final public let time: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(airPlayActive: Swift.Bool, time: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPPlaylistConfig) final public class PlaylistConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public let sources: [any BitmovinPlayerCore.Source]
  @objc final public let options: BitmovinPlayerCore.PlaylistOptions
  @objc convenience public init(sources: [any BitmovinPlayerCore.Source])
  @objc public init(sources: [any BitmovinPlayerCore.Source], options: BitmovinPlayerCore.PlaylistOptions)
  @objc deinit
}
@objcMembers @objc(BMPSubtitleTrack) public class SubtitleTrack : BitmovinPlayerCore.Track, @unchecked Swift.Sendable {
  @objc final public let format: BitmovinPlayerCore.SubtitleFormat
  @objc final public let language: Swift.String?
  @objc final public let controller: any BitmovinPlayerCore.SubtitleTrackController
  @objc public var isForced: Swift.Bool {
    get
  }
  @objc public init(url: Foundation.URL?, format: BitmovinPlayerCore.SubtitleFormat, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?, forced: Swift.Bool)
  @objc convenience public init(url: Foundation.URL?, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?)
  @objc convenience public init(url: Foundation.URL?, format: BitmovinPlayerCore.SubtitleFormat, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?)
  @objc convenience public init(url: Foundation.URL?, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?, forced: Swift.Bool)
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPTweaksConfig) final public class TweaksConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public var isNativeHlsParsingEnabled: Swift.Bool
  @objc final public var isCustomHlsLoadingEnabled: Swift.Bool
  @objc final public var timeChangedInterval: Swift.Double
  @objc @available(*, deprecated, message: "This tweak is deprecated and will be removed without replacement in an upcoming minor version!")
  final public var disableSubtitleTracksWhileSeeking: Swift.Bool
  @objc final public var seekToEndThreshold: Swift.Double
  @objc final public var playbackStartBehaviour: BitmovinPlayerCore.PlaybackStartBehaviour
  @objc final public var unstallingBehaviour: BitmovinPlayerCore.UnstallingBehaviour
  @objc final public var delayInitialSubtitleSelection: Swift.Bool
  @objc @available(tvOS, unavailable)
  final public var discardAdsWhileCasting: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(tvOS, unavailable)
  @available(*, deprecated, message: "To enable the Now Playing information use `NowPlayingConfig.isNowPlayingInfoEnabled`")
  final public var updatesNowPlayingInfoCenter: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var enforcedMinimumBufferLevelForPlayback: Foundation.TimeInterval
  @objc final public var dateBasedTimeShiftingForLiveStreams: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(BMPLoggingConfig) final public class LoggingConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public var logger: (any BitmovinPlayerCore.Logger)?
  @objc deinit
}
@objcMembers @objc(BMPBufferLevel) open class BufferLevel : ObjectiveC.NSObject {
  @objc final public let level: Foundation.TimeInterval
  @objc final public let targetLevel: Foundation.TimeInterval
  @objc final public let media: BitmovinPlayerCore.MediaType
  @objc final public let type: BitmovinPlayerCore.BufferType
  @objc public init(buffer: BitmovinPlayerCore.BufferType, media: BitmovinPlayerCore.MediaType, targetLevel: Foundation.TimeInterval, level: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalAdPlaybackDidRequestContentResumeEvent) @objcMembers public class _InternalAdPlaybackDidRequestContentResumeEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPGetAvailableSubtitlesEvent) @objcMembers public class _GetAvailableSubtitlesEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let subtitleTracks: [BitmovinPlayerCore.SubtitleTrack]
  @objc public init(subtitleTracks: [BitmovinPlayerCore.SubtitleTrack]?)
  @objc deinit
}
@objc(_BMPDateTimeProvider) public protocol _DateTimeProvider {
  @objc var currentDate: Foundation.Date { get }
}
@objc @_inheritsConvenienceInitializers public class PictureInPictureExitEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.PictureInPictureExitEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(BMPTimeChangedEvent) open class TimeChangedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let currentTime: Foundation.TimeInterval
  @objc public init(currentTime: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPCastPausedEvent) @objcMembers open class CastPausedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPPlayerEvent) @objcMembers open class PlayerEvent : ObjectiveC.NSObject, BitmovinPlayerCore.Event, @unchecked Swift.Sendable {
  @objc final public let timestamp: Foundation.TimeInterval
  @objc public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.PlayerEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@available(*, deprecated, message: "Use NetworkConfig.preprocessHttpRequest instead.")
@objc(BMPPreprocessHttpRequestDelegate) public protocol PreprocessHttpRequestDelegate : Swift.Sendable {
  @objc func preprocessHttpRequest(_ type: Swift.String, httpRequest: BitmovinPlayerCore.HttpRequest, completionHandler: @escaping (_ httpRequest: BitmovinPlayerCore.HttpRequest) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalCastSourceRemovedEvent) @objcMembers public class _InternalCastSourceRemovedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(_BMPTimerFactory) public protocol _TimerFactory {
  @objc func create(timeInterval: Foundation.TimeInterval, eventHandlerQueue: Dispatch.DispatchQueue) -> any BitmovinPlayerCore._Timer
  @objc func create(timeInterval: Foundation.TimeInterval, timerQueue: Dispatch.DispatchQueue, eventHandlerQueue: Dispatch.DispatchQueue) -> any BitmovinPlayerCore._Timer
  @objc func createAndStart(timeInterval: Foundation.TimeInterval, repeats: Swift.Bool, eventHandlerQueue: Dispatch.DispatchQueue, eventHandler: @escaping () -> Swift.Void) -> any BitmovinPlayerCore._Timer
  @objc func createAndStart(timeInterval: Foundation.TimeInterval, repeats: Swift.Bool, timerQueue: Dispatch.DispatchQueue, eventHandlerQueue: Dispatch.DispatchQueue, eventHandler: @escaping () -> Swift.Void) -> any BitmovinPlayerCore._Timer
}
@objc(_BMPScheduledAdItemStatus) public enum _ScheduledAdItemStatus : Swift.Int {
  case notLoaded = 0
  case loading
  case loaded
  case error
  case finished
  case unloaded
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(BMPSourceRemovedEvent) @objcMembers public class SourceRemovedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(_BMPResourceLoaderService) public protocol _ResourceLoaderService {
  @objc(setupResourceLoadersWithSourceConfig:asset:) func setupResourceLoaders(with sourceConfig: BitmovinPlayerCore.SourceConfig, asset: AVFoundation.AVURLAsset)
  @objc(renewExpiringFairplayLicenseFor:) func renewExpiringFairplayLicense(for contentKeyRequest: BitmovinPlayerCore.FairplayContentKeyRequest)
}
@objc(_BMPPlayerListenerInternal) public protocol _PlayerListenerInternal : BitmovinPlayerCore.PlayerListener {
  @objc optional nonisolated func onUnseen(_ unseenEvents: [any BitmovinPlayerCore.Event], player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalMasterPlaylistLoaded(_ event: BitmovinPlayerCore._InternalMasterPlaylistLoadedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalVariantPlaylistLoaded(_ event: BitmovinPlayerCore._InternalVariantPlaylistLoadedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalTimeChanged(_ event: BitmovinPlayerCore._InternalTimeChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalReady(_ event: BitmovinPlayerCore._InternalReadyEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalPlaybackInitiated(_ event: BitmovinPlayerCore._InternalPlaybackInitiatedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalPlaybackIntention(_ event: BitmovinPlayerCore._InternalPlaybackIntentionEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalTimeShift(_ event: BitmovinPlayerCore._InternalTimeShiftEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalTimeShifted(_ event: BitmovinPlayerCore._InternalTimeShiftedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalActiveSourceChanged(_ event: BitmovinPlayerCore._InternalActiveSourceChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalCastReady(_ event: BitmovinPlayerCore._InternalCastReadyEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalCastActiveSourceChanged(_ event: BitmovinPlayerCore._InternalCastActiveSourceChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalCastStop(_ event: BitmovinPlayerCore._InternalCastStopEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalBufferLevelChanged(_ event: BitmovinPlayerCore._InternalBufferLevelChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalPlaylistTransition(_ event: BitmovinPlayerCore._InternalPlaylistTransitionEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalCastPlaylistTransition(_ event: BitmovinPlayerCore._InternalCastPlaylistTransitionEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalPlaying(_ event: BitmovinPlayerCore._InternalPlayingEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalPlayerLoad(_ event: BitmovinPlayerCore._InternalPlayerLoadEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalPlayerUnload(_ event: BitmovinPlayerCore._InternalPlayerUnloadEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalSourcePlaybackFinished(_ event: BitmovinPlayerCore._InternalSourcePlaybackFinishedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalSourceAdded(_ event: BitmovinPlayerCore._InternalSourceAddedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalCastSourceAdded(_ event: BitmovinPlayerCore._InternalCastSourceAddedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalSourceRemoved(_ event: BitmovinPlayerCore._InternalSourceRemovedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalCastSourceRemoved(_ event: BitmovinPlayerCore._InternalCastSourceRemovedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalAdPlaybackDidRequestContentPause(_ event: BitmovinPlayerCore._InternalAdPlaybackDidRequestContentPauseEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalAdPlaybackDidRequestContentResume(_ event: BitmovinPlayerCore._InternalAdPlaybackDidRequestContentResumeEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalSeek(_ event: BitmovinPlayerCore._InternalSeekEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalSeeked(_ event: BitmovinPlayerCore._InternalSeekedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalCanStartPlaybackImmediately(_ event: BitmovinPlayerCore._InternalCanStartPlaybackImmediatelyEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalStallStarted(_ event: BitmovinPlayerCore._InternalStallStartedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onInternalStallEnded(_ event: BitmovinPlayerCore._InternalStallEndedEvent, player: any BitmovinPlayerCore.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional nonisolated func onInternalSharePlayStarted(_ event: BitmovinPlayerCore._InternalSharePlayStartedEvent, player: any BitmovinPlayerCore.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional nonisolated func onInternalSharePlayEnded(_ event: BitmovinPlayerCore._InternalSharePlayEndedEvent, player: any BitmovinPlayerCore.Player)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPBitmovinUserInterfaceMetadata) public class BitmovinUserInterfaceMetadata : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var title: Swift.String?
  @objc public var sourceDescription: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlaySuspension) public protocol SharePlaySuspension {
  typealias Reason = AVFoundation.AVCoordinatedPlaybackSuspension.Reason
  @objc var reason: Self.Reason { get }
  @objc var beginDate: Foundation.Date { get }
}
@objc(BMPPlaylistApi) public protocol PlaylistApi {
  @objc var sources: [any BitmovinPlayerCore.Source] { get }
  @objc func seek(source: any BitmovinPlayerCore.Source, time: Foundation.TimeInterval)
  @objc func add(source: any BitmovinPlayerCore.Source, at index: Swift.Int)
  @objc func add(source: any BitmovinPlayerCore.Source)
  @objc func remove(sourceAt index: Swift.Int)
}
@objc(_BMPInitializationService) public protocol _InitializationService : BitmovinPlayerCore._Service {
  @objc(setup:) func setup(playerConfig: BitmovinPlayerCore.PlayerConfig)
}
@objc(BMPPlaybackStartBehaviour) public enum PlaybackStartBehaviour : Swift.UInt {
  case relaxed = 0
  case aggressive = 1
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPDrmLicenseInformation) public class DrmLicenseInformation : ObjectiveC.NSObject {
  @objc final public let licenseDuration: Foundation.TimeInterval
  @objc final public let playbackDuration: Foundation.TimeInterval
  @objc convenience public init(licenseDuration: Foundation.TimeInterval, playbackDuration: Foundation.TimeInterval)
  @objc public func remainingLicenseDuration() -> Foundation.TimeInterval
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPCastPlayingEvent) @objcMembers open class CastPlayingEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14.0, tvOS 14.0, *)
public enum PlayerCoreFactory : @unchecked Swift.Sendable {
  public static var sdkVersion: Swift.String {
    get
  }
  public static func createPlayer(playerConfig: BitmovinPlayerCore.PlayerConfig = PlayerConfig()) -> any BitmovinPlayerCore.Player
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPBufferMediaTypeConfig) public class BufferMediaTypeConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var forwardDuration: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPDrmConfig) public class DrmConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var licenseUrl: Foundation.URL?
  @objc public var uuid: Foundation.UUID
  @objc(initWithLicenseUrl:uuid:) public init(license licenseUrl: Foundation.URL?, uuid: Foundation.UUID)
  @objc(initWithUUID:) convenience public init(uuid: Foundation.UUID)
  @objc deinit
}
@objc(_BMPLegacySourceInternal) public protocol _LegacySourceInternal : BitmovinPlayerCore.Source {
  @objc var isActive: Swift.Bool { get }
  @objc var urlAsset: AVFoundation.AVURLAsset? { get }
  @objc var playerItem: BitmovinPlayerCore._BMPAVPlayerItem? { get }
  @objc var embeddedMetadata: [BitmovinPlayerCore.Metadata] { get }
  @objc var isLive: Swift.Bool { get }
  @objc var availableAudio: [BitmovinPlayerCore.AudioTrack] { get }
  @objc var audio: BitmovinPlayerCore.AudioTrack? { get }
  @objc var maxTimeShift: Foundation.TimeInterval { get }
  @objc var targetStartTime: Foundation.TimeInterval { get }
  @objc var maxSelectableBitrate: Swift.UInt { get set }
  @objc var currentVideoFrameRate: Swift.Float { get }
  @objc var availableVideoQualities: [BitmovinPlayerCore.VideoQuality] { get }
  @objc var videoQuality: BitmovinPlayerCore.VideoQuality? { get }
  @objc var availableSubtitles: [BitmovinPlayerCore.SubtitleTrack] { get }
  @objc var subtitle: BitmovinPlayerCore.SubtitleTrack { get }
  @objc var subtitleCues: [BitmovinPlayerCore.Cue] { get }
  @objc func addSubtitleTrack(_ track: BitmovinPlayerCore.SubtitleTrack)
  @objc func removeSubtitleTrack(identifier: Swift.String)
  @objc func setSubtitleTrack(identifier: Swift.String?)
  @objc func setSubtitleStyles(_ subtitleStyles: [AVFoundation.AVTextStyleRule]?)
  @objc func setAudio(with identifier: Swift.String)
  @objc func canApplyPlaybackSpeed(_ playbackSpeed: Swift.Float) -> Swift.Bool
  @objc func clampPlaybackSpeedIfNeeded(_ playbackSpeed: Swift.Float) -> Swift.Float
}
@objc(BMPSubtitleTrackController) public protocol SubtitleTrackController : ObjectiveC.NSObjectProtocol, Swift.Sendable {
  @objc func cueEnter(_ cue: BitmovinPlayerCore.Cue)
  @objc func cueExit(_ cue: BitmovinPlayerCore.Cue)
}
@_inheritsConvenienceInitializers @objc(BMPSourceEventsApi) public class SourceEventsApi : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.SourceEventsApi {
  public func on<T>(_ eventType: T.Type) -> Combine.AnyPublisher<T, Swift.Never> where T : BitmovinPlayerCore.SourceEvent
}
@objc(_BMPPlaylistUrlTracker) public protocol _PlaylistUrlTracker {
  @objc(registerUrl:type:) func register(url: Foundation.URL, type: BitmovinPlayerCore.HttpRequestType)
  @objc(typeForUrl:) func type(url: Foundation.URL) -> BitmovinPlayerCore.HttpRequestType
}
@objc(_BMPPlayerModule) public protocol _PlayerModule : Swift.Sendable {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 14.0, tvOS 14.0, *)
@_Concurrency.MainActor @objcMembers @objc(BMPPlayerView) open class PlayerView : UIKit.UIView {
  @_Concurrency.MainActor @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc @_Concurrency.MainActor public var player: (any BitmovinPlayerCore.Player)? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor weak public var fullscreenHandler: (any BitmovinPlayerCore.FullscreenHandler)? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor public var systemUi: (any BitmovinPlayerCore.SystemUiApi)? {
    get
  }
  @objc @_Concurrency.MainActor public var pictureInPicture: (any BitmovinPlayerCore.PictureInPictureApi)? {
    get
  }
  @objc @_Concurrency.MainActor final public let events: BitmovinPlayerCore.PlayerViewEventsApi
  @objc @_Concurrency.MainActor public init(player: any BitmovinPlayerCore.Player, frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor public init(player: any BitmovinPlayerCore.Player, frame: CoreFoundation.CGRect, playerViewConfig: BitmovinPlayerCore.PlayerViewConfig)
  @available(*, unavailable)
  @_Concurrency.MainActor @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable)
  @_Concurrency.MainActor @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @objc override dynamic public func didMoveToSuperview()
  @objc @_Concurrency.MainActor public func willRotate()
  @objc @_Concurrency.MainActor public func didRotate()
  @objc deinit
}
extension BitmovinPlayerCore.PlayerView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
}
extension BitmovinPlayerCore.PlayerView : BitmovinPlayerCore.UserInterfaceApi {
  @_Concurrency.MainActor @objc dynamic public var isFullscreen: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @objc dynamic public var areControlsShown: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @objc dynamic public var isPictureInPictureAvailable: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @objc dynamic public var isPictureInPicture: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @objc dynamic public var scalingMode: BitmovinPlayerCore.ScalingMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc dynamic public func enterPictureInPicture()
  @_Concurrency.MainActor @objc dynamic public func exitPictureInPicture()
  @_Concurrency.MainActor @objc dynamic public func enterFullscreen()
  @_Concurrency.MainActor @objc dynamic public func exitFullscreen()
  @_Concurrency.MainActor @objc dynamic public func setPosterImage(url: Foundation.URL, keepPersistent: Swift.Bool)
  @_Concurrency.MainActor @objc dynamic public func setSubtitleStyles(_ subtitleStyles: [AVFoundation.AVTextStyleRule]?)
}
extension BitmovinPlayerCore.PlayerView : BitmovinPlayerCore.UserInterfaceEventHandler {
  @_Concurrency.MainActor @objc dynamic public func add(listener: any BitmovinPlayerCore.UserInterfaceListener)
  @_Concurrency.MainActor @objc dynamic public func remove(listener: any BitmovinPlayerCore.UserInterfaceListener)
}
extension BitmovinPlayerCore.PlayerView : BitmovinPlayerCore._PlayerListenerInternal {
  @objc nonisolated dynamic public func onInternalAdPlaybackDidRequestContentPause(_ event: BitmovinPlayerCore._InternalAdPlaybackDidRequestContentPauseEvent, player: any BitmovinPlayerCore.Player)
  @objc nonisolated dynamic public func onInternalAdPlaybackDidRequestContentResume(_ event: BitmovinPlayerCore._InternalAdPlaybackDidRequestContentResumeEvent, player: any BitmovinPlayerCore.Player)
  @objc nonisolated dynamic public func onStallStarted(_ event: BitmovinPlayerCore.StallStartedEvent, player: any BitmovinPlayerCore.Player)
  @objc nonisolated dynamic public func onStallEnded(_ event: BitmovinPlayerCore.StallEndedEvent, player: any BitmovinPlayerCore.Player)
  @objc nonisolated dynamic public func onPlayerInactive(_ event: BitmovinPlayerCore.PlayerInactiveEvent, player: any BitmovinPlayerCore.Player)
  @objc nonisolated dynamic public func onAdStarted(_ event: BitmovinPlayerCore.AdStartedEvent, player: any BitmovinPlayerCore.Player)
}
@objc(_BMPAdvertisingService) public protocol _AdvertisingService : BitmovinPlayerCore._Service {
  @objc var isAd: Swift.Bool { get }
  @objc var isMuted: Swift.Bool { get }
  @objc var isPlaying: Swift.Bool { get }
  @objc var isPaused: Swift.Bool { get }
  @objc var currentTime: Foundation.TimeInterval { get }
  @objc var duration: Foundation.TimeInterval { get }
  @objc func skipAd()
  @objc func skipAdBreak()
  @objc func schedule(adItem: BitmovinPlayerCore.AdItem)
  @objc func register(adContainer: UIKit.UIView)
  @objc func play()
  @objc func pause()
  @objc func mute()
  @objc func unmute()
  @objc func set(volume: Swift.Int)
  @objc func hasAdsAfterDiscardingAdsThatShouldNotBeLoaded(forPlaybackTime playbackTime: Foundation.TimeInterval) -> Swift.Bool
}
@objc(BMPSourceType) public enum SourceType : Swift.Int {
  case none = 0
  case hls
  case dash
  case progressive
  case movpkg
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPFullscreenDisabledEvent) public class FullscreenDisabledEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.FullscreenDisabledEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
public class InterstitialMarker : BitmovinPlayerCore.TimelineMarker, @unchecked Swift.Sendable {
  @objc public var time: Foundation.TimeInterval
  @objc public var duration: Foundation.TimeInterval
  final public let requiresLinearPlayback: Swift.Bool
  public init(time: Foundation.TimeInterval, duration: Foundation.TimeInterval, requiresLinearPlayback: Swift.Bool = false)
  @objc deinit
}
@objc extension BitmovinPlayerCore._BMPSession {
  @objc public static let playlistLoaderSession: BitmovinPlayerCore._BMPSession
}
@objcMembers @objc(BMPMetadataEvent) public class MetadataEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let metadataType: BitmovinPlayerCore.MetadataType
  @objc final public let metadata: BitmovinPlayerCore.Metadata
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(metadata: BitmovinPlayerCore.Metadata, type: BitmovinPlayerCore.MetadataType)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalStallStartedEvent) public class _InternalStallStartedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPLicenseData) @objcMembers public class LicenseData : ObjectiveC.NSObject {
  @objc final public let analytics: BitmovinPlayerCore.AnalyticsLicenseData
  @objc public init(analytics: BitmovinPlayerCore.AnalyticsLicenseData)
  @objc deinit
}
@objc(BMPAdItem) @objcMembers public class AdItem : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public let sources: [BitmovinPlayerCore.AdSource]
  @objc final public let position: Swift.String?
  @objc final public let linearAdUiConfig: BitmovinPlayerCore.LinearAdUiConfig
  @objc convenience public init(adSources sources: [BitmovinPlayerCore.AdSource])
  @objc convenience public init(adSources sources: [BitmovinPlayerCore.AdSource], atPosition position: Swift.String?)
  @objc public init(adSources sources: [BitmovinPlayerCore.AdSource], atPosition position: Swift.String?, linearAdUiConfig: BitmovinPlayerCore.LinearAdUiConfig)
  @objc deinit
}
@objcMembers @objc(BMPSourceUnloadEvent) public class SourceUnloadEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc public init(source: any BitmovinPlayerCore.Source)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPFullscreenEnabledEvent) public class FullscreenEnabledEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.FullscreenEnabledEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
public struct VideoPlayerView : SwiftUI.View {
  public init(player: any BitmovinPlayerCore.Player, playerViewConfig: BitmovinPlayerCore.PlayerViewConfig = PlayerViewConfig())
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s18BitmovinPlayerCore05VideoB4ViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalActiveSourceChangedEvent) final public class _InternalActiveSourceChangedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let from: (any BitmovinPlayerCore._LegacySourceInternal)?
  @objc final public let to: (any BitmovinPlayerCore._LegacySourceInternal)?
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(_BMPSourceModule) public protocol _SourceModule : Swift.Sendable {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPVideoDownloadQualityChangedEvent) @objcMembers public class VideoDownloadQualityChangedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let videoQualityOld: BitmovinPlayerCore.VideoQuality?
  @objc final public let videoQualityNew: BitmovinPlayerCore.VideoQuality?
  @objc public init(newVideoQuality: BitmovinPlayerCore.VideoQuality?, oldVideoQuality: BitmovinPlayerCore.VideoQuality?)
  @objc deinit
}
extension BitmovinPlayerCore.VideoDownloadQualityChangedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @objc(_BMPPlayerModulesApi) public class _PlayerModulesApi : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore._PlayerModulesApi {
  public func _registerModule(_ factory: (any BitmovinPlayerCore.Player) -> any BitmovinPlayerCore._PlayerModule)
  public func _module<T>(_ type: T.Type) -> T? where T : BitmovinPlayerCore._PlayerModule
  public func _unregisterModule<T>(_ type: T.Type) where T : BitmovinPlayerCore._PlayerModule
}
@objcMembers @objc(BMPSourceLoadedEvent) public class SourceLoadedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc public init(source: any BitmovinPlayerCore.Source)
  @objc deinit
}
extension BitmovinPlayerCore.SourceLoadedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objcMembers @objc(BMPCue) public class Cue : ObjectiveC.NSObject, Foundation.NSCopying, @unchecked Swift.Sendable {
  @objc public var startTime: Foundation.TimeInterval
  @objc public var endTime: Foundation.TimeInterval
  @objc public var html: Swift.String?
  @objc public var text: Swift.String?
  @objc public var rawText: Swift.String?
  @objc public var attributedText: Foundation.NSAttributedString?
  @objc public var image: UIKit.UIImage?
  @objc public var position: BitmovinPlayerCore.CuePosition?
  @objc public var region: Swift.String?
  @objc public var regionStyle: Swift.String?
  @objc public var vtt: BitmovinPlayerCore.VttProperties?
  @objc public init(startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, html: Swift.String? = nil, text: Swift.String? = nil, rawText: Swift.String? = nil, attributedText: Foundation.NSAttributedString? = nil, image: UIKit.UIImage? = nil, position: BitmovinPlayerCore.CuePosition? = nil, region: Swift.String? = nil, regionStyle: Swift.String? = nil, vttProperties: BitmovinPlayerCore.VttProperties? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
public typealias _BMPRequestAdapter = (_ urlRequest: Foundation.URLRequest, _ completion: @escaping (Foundation.URLRequest) -> Swift.Void) -> Swift.Void
public typealias _BMPRequestRetrier = (_ request: Foundation.URLRequest, _ response: Foundation.HTTPURLResponse, _ data: Foundation.Data?, _ retryCount: Swift.Int, _ error: any Swift.Error, _ completion: @escaping (BitmovinPlayerCore._BMPRetryResult) -> Swift.Void) -> Swift.Void
public typealias _BMPResponseAdapter = (_ response: BitmovinPlayerCore._BMPUrlRequestResult, _ completion: @escaping (BitmovinPlayerCore._BMPUrlRequestResult) -> Swift.Void) -> Swift.Void
public typealias _BMPMetricsProvider = (_ metrics: BitmovinPlayerCore._BMPRequestMetrics) -> Swift.Void
public typealias _BMPValidation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> Swift.Bool
@_hasMissingDesignatedInitializers @objc @objcMembers public class _BMPRequestConfig : ObjectiveC.NSObject {
  @objc convenience public init(urlRequest: Foundation.URLRequest, requestAdapter: BitmovinPlayerCore._BMPRequestAdapter?, requestRetrier: BitmovinPlayerCore._BMPRequestRetrier?, responseAdapter: BitmovinPlayerCore._BMPResponseAdapter?, onDownloadFinished: BitmovinPlayerCore._BMPMetricsProvider?, validation: BitmovinPlayerCore._BMPValidation?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPDefaultTimer) final public class _DefaultTimer : ObjectiveC.NSObject {
  @objc final public var eventHandler: (() -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension BitmovinPlayerCore._DefaultTimer : BitmovinPlayerCore._Timer {
  @objc final public var isRunning: Swift.Bool {
    @objc get
  }
  @objc final public var isCanceled: Swift.Bool {
    @objc get
  }
  @objc final public var isSuspended: Swift.Bool {
    @objc get
  }
  @objc final public func resume()
  @objc final public func suspend()
  @objc final public func cancel()
}
@objc(_BMPTimer) public protocol _Timer {
  @objc var isRunning: Swift.Bool { get }
  @objc var isCanceled: Swift.Bool { get }
  @objc var isSuspended: Swift.Bool { get }
  @objc var eventHandler: (() -> Swift.Void)? { get set }
  @objc func resume()
  @objc func suspend()
  @objc func cancel()
}
@objc(BMPSourceListener) public protocol SourceListener : ObjectiveC.NSObjectProtocol {
  @objc optional nonisolated func onDurationChanged(_ event: BitmovinPlayerCore.DurationChangedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onSourceLoad(_ event: BitmovinPlayerCore.SourceLoadEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onSourceLoaded(_ event: BitmovinPlayerCore.SourceLoadedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onSourceUnload(_ event: BitmovinPlayerCore.SourceUnloadEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onSourceUnloaded(_ event: BitmovinPlayerCore.SourceUnloadedEvent, source: any BitmovinPlayerCore.Source)
  @available(*, deprecated, message: "Warnings are now communicated through logs with level `.warning`. These logs are printed to the console by default. You can also access them by providing your own logger to `DebugConfig.logging.logger`\"")
  @objc optional nonisolated func onSourceWarning(_ event: BitmovinPlayerCore.SourceWarningEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onSourceError(_ event: BitmovinPlayerCore.SourceErrorEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onMetadataParsed(_ event: BitmovinPlayerCore.MetadataParsedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onEvent(_ event: any BitmovinPlayerCore.SourceEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onDrmDataParsed(_ event: BitmovinPlayerCore.DrmDataParsedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onAudioAdded(_ event: BitmovinPlayerCore.AudioAddedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onAudioRemoved(_ event: BitmovinPlayerCore.AudioRemovedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onAudioChanged(_ event: BitmovinPlayerCore.AudioChangedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onCueParsed(_ event: BitmovinPlayerCore.CueParsedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onSubtitleAdded(_ event: BitmovinPlayerCore.SubtitleAddedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onSubtitleRemoved(_ event: BitmovinPlayerCore.SubtitleRemovedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onSubtitleChanged(_ event: BitmovinPlayerCore.SubtitleChangedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onVideoDownloadQualityChanged(_ event: BitmovinPlayerCore.VideoDownloadQualityChangedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onVideoPlaybackQualityChanged(_ event: BitmovinPlayerCore.VideoPlaybackQualityChangedEvent, source: any BitmovinPlayerCore.Source)
  @objc optional nonisolated func onFairplayLicenseAcquired(_ event: BitmovinPlayerCore.FairplayLicenseAcquiredEvent, source: any BitmovinPlayerCore.Source)
}
@_inheritsConvenienceInitializers @objc(_BMPInternalSeekedEvent) @objcMembers public class _InternalSeekedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSystemUserInterfaceConfig) public class SystemUserInterfaceConfig : BitmovinPlayerCore.UserInterfaceConfig, @unchecked Swift.Sendable {
  @objc public var subtitleStyles: [AVFoundation.AVTextStyleRule]?
  @objc public var hideFirstFrame: Swift.Bool
  @objc @available(tvOS 14.0, *)
  @available(iOS, unavailable)
  public var showAutoSubtitleOption: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(tvOS 14.0, *)
  @available(iOS, unavailable)
  public var showSeekBar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(tvOS 14.0, *)
  @available(iOS, unavailable)
  public var showInfoViews: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(tvOS 15.0, *)
  @available(iOS, unavailable)
  public var showTitleInSeekBar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(tvOS 15.0, *)
  @available(iOS, unavailable)
  public var transportBarCustomMenuItems: [UIKit.UIMenuElement] {
    @objc get
    @objc set
  }
  @objc @available(tvOS 14.0, *)
  @available(iOS, unavailable)
  public var timeToSeekAfterUserSeeked: ((_ oldTime: Foundation.TimeInterval, _ targetTime: Foundation.TimeInterval) -> Foundation.TimeInterval)? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPSourceEventEmitter) public protocol _SourceEventEmitter {
  @objc func emit(event: any BitmovinPlayerCore.SourceEvent, isInternal: Swift.Bool)
}
@objc(_BMPTimeService) public protocol _TimeService {
  @objc var duration: Foundation.TimeInterval { get }
  @objc var maxTimeShift: Foundation.TimeInterval { get }
  @objc var timeShift: Foundation.TimeInterval { get }
  @objc var liveEdge: Foundation.TimeInterval { get }
  @objc func currentTime(_ timeMode: BitmovinPlayerCore.TimeMode) -> Foundation.TimeInterval
}
@objcMembers @objc(BMPPlaylistTransitionEvent) public class PlaylistTransitionEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let from: any BitmovinPlayerCore.Source
  @objc final public let to: any BitmovinPlayerCore.Source
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(from: any BitmovinPlayerCore.Source, to: any BitmovinPlayerCore.Source)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @objcMembers public class _BMPDataRequest : ObjectiveC.NSObject {
  @objc public var isCancelled: Swift.Bool {
    @objc get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func response() async -> BitmovinPlayerCore._BMPDataResponse
  #endif
  @objc public func cancel()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPSubtitleAddedEvent) @objcMembers open class SubtitleAddedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let subtitleTrack: BitmovinPlayerCore.SubtitleTrack
  @objc public init(subtitleTrack: BitmovinPlayerCore.SubtitleTrack)
  @objc deinit
}
extension BitmovinPlayerCore.SubtitleAddedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSubtitleUserInterfaceConfig) public class SubtitleUserInterfaceConfig : BitmovinPlayerCore.UserInterfaceConfig, @unchecked Swift.Sendable {
  @objc public var subtitleStyles: [AVFoundation.AVTextStyleRule]?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSourceLiveConfig) public class SourceLiveConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var minTimeshiftBufferDepth: Foundation.TimeInterval
  @objc public var targetLatency: Foundation.TimeInterval
  @objc public var automaticallyPreservesLatency: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPLabelingConfig) public class LabelingConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var subtitleLabel: ((_ track: BitmovinPlayerCore.SubtitleTrack) -> Swift.String)?
  @objc public var audioLabel: ((_ track: BitmovinPlayerCore.AudioTrack) -> Swift.String)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPAdScheduledEvent) @objcMembers open class AdScheduledEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let numberOfAds: Swift.UInt
  @objc public init(numberOfAds: Swift.UInt)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc @objcMembers public class _BMPDataResponse : ObjectiveC.NSObject {
  @objc final public let request: Foundation.URLRequest?
  @objc final public let response: Foundation.HTTPURLResponse?
  @objc final public let data: Foundation.Data?
  @objc final public let error: (any Swift.Error)?
  @objc final public let metrics: BitmovinPlayerCore._BMPRequestMetrics?
  @objc public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?, metrics: BitmovinPlayerCore._BMPRequestMetrics?)
  @objc deinit
}
@objc(BMPAudioAddedEvent) @objcMembers public class AudioAddedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let audioTrack: BitmovinPlayerCore.AudioTrack
  @objc final public let time: Foundation.TimeInterval
  @objc public init(audioTrack: BitmovinPlayerCore.AudioTrack, time: Foundation.TimeInterval)
  @objc deinit
}
extension BitmovinPlayerCore.AudioAddedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objcMembers @objc(BMPTimelineMarkerExitEvent) public class TimelineMarkerExitEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let timelineMarker: any BitmovinPlayerCore.TimelineMarker
  @objc public init(timelineMarker: any BitmovinPlayerCore.TimelineMarker)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalCastSourceAddedEvent) @objcMembers public class _InternalCastSourceAddedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(BMPMetadataParsedEvent) public class MetadataParsedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let name: Swift.String
  @objc final public let metadataType: BitmovinPlayerCore.MetadataType
  @objc final public let metadata: BitmovinPlayerCore.Metadata
  @objc public init(metadata: BitmovinPlayerCore.Metadata, type: BitmovinPlayerCore.MetadataType)
  @objc deinit
}
@objc(_BMPAdPlayerManagerDelegate) public protocol _AdPlayerManagerDelegate {
  @objc(adPlayerManager:didStartAdBreak:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didStart adBreak: any BitmovinPlayerCore.AdBreak)
  @objc(adPlayerManager:didFinishAdBreak:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didFinish adBreak: any BitmovinPlayerCore.AdBreak)
  @objc(adPlayerManager:didReceiveError:forScheduledAdItem:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didReceive error: any Swift.Error, for scheduledAdItem: BitmovinPlayerCore._ScheduledAdItem)
  @objc(adPlayerManager:didReachAdQuartile:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didReach adQuartile: BitmovinPlayerCore.AdQuartile)
  @objc(adPlayerManager:didStart:from:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didStart ad: any BitmovinPlayerCore.Ad, from scheduledAdItem: BitmovinPlayerCore._ScheduledAdItem)
  @objc(adPlayerManager:didFinishAd:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didFinish ad: any BitmovinPlayerCore.Ad)
  @objc(adPlayerManager:didSkipAd:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didSkip ad: any BitmovinPlayerCore.Ad)
  @objc(adPlayerManager:adWasClicked:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, adWasClicked ad: any BitmovinPlayerCore.Ad)
  @objc(adPlayerManager:didRequestContentPauseFor:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didRequestContentPauseFor adItem: BitmovinPlayerCore.AdItem)
  @objc(adPlayerManagerDidRequestContentResume:) func adPlayerManagerDidRequestContentResume(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager)
  @objc(adPlayerManagerWillResume:) func adPlayerManagerWillResume(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager)
  @objc(adPlayerManagerDidResume:) func adPlayerManagerDidResume(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager)
  @objc(adPlayerManagerWillPause:) func adPlayerManagerWillPause(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager)
  @objc(adPlayerManagerDidPause:) func adPlayerManagerDidPause(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager)
  @objc(adPlayerManager:didProgressToTime:) func adPlayerManager(_ adPlayerManager: any BitmovinPlayerCore._AdPlayerManager, didProgressToTime currentTime: Foundation.TimeInterval)
}
@objcMembers @objc(BMPAdBreakEvent) open class AdBreakEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let adBreak: any BitmovinPlayerCore.AdBreak
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(adBreak: any BitmovinPlayerCore.AdBreak)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPSourceLoadEvent) public class SourceLoadEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc public init(source: any BitmovinPlayerCore.Source)
  @objc deinit
}
extension Foundation.NSURL {
  @objc dynamic public var _bmp_isHlsUrl: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_isProgressiveUrl: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_isDashUrl: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_isMovpkgUrl: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_sourceType: BitmovinPlayerCore.SourceType {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalReadyEvent) public class _InternalReadyEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPCueExitEvent) open class CueExitEvent : BitmovinPlayerCore.PlayerEvent, BitmovinPlayerCore.CueEvent, @unchecked Swift.Sendable {
  @objc public var startTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var endTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var text: Swift.String? {
    @objc get
  }
  @objc public var rawText: Swift.String? {
    @objc get
  }
  @objc public var attributedText: Foundation.NSAttributedString? {
    @objc get
  }
  @objc public var html: Swift.String? {
    @objc get
  }
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public var position: BitmovinPlayerCore.CuePosition? {
    @objc get
  }
  @objc public var region: Swift.String? {
    @objc get
  }
  @objc public var regionStyle: Swift.String? {
    @objc get
  }
  @objc public var vtt: BitmovinPlayerCore.VttProperties? {
    @objc get
  }
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @available(visionOS, unavailable)
@objcMembers @objc(BMPRemoteControlConfig) public class RemoteControlConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var receiverStylesheetUrl: Foundation.URL?
  @objc public var customReceiverConfig: [Swift.String : Swift.String]
  @objc public var prepareSource: ((_ type: BitmovinPlayerCore.RemoteControlType, _ sourceConfig: BitmovinPlayerCore.SourceConfig) -> BitmovinPlayerCore.SourceConfig?)?
  @objc public var usesExternalPlaybackWhileExternalScreenIsActive: Swift.Bool
  @objc public var sendManifestRequestsWithCredentials: Swift.Bool
  @objc public var sendSegmentRequestsWithCredentials: Swift.Bool
  @objc public var sendDrmLicenseRequestsWithCredentials: Swift.Bool
  @objc @available(*, deprecated, renamed: "allowsAirPlay")
  public var isAirPlayEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var allowsAirPlay: Swift.Bool
  @objc public var isCastEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdFinishedEvent) open class AdFinishedEvent : BitmovinPlayerCore.AdEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public init(ad: any BitmovinPlayerCore.Ad)
  @objc deinit
}
@objcMembers @objc(BMPAdClickedEvent) open class AdClickedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let clickThroughUrl: Foundation.URL?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(clickThroughUrl: Foundation.URL?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPAdStartedEvent) open class AdStartedEvent : BitmovinPlayerCore.AdEvent, @unchecked Swift.Sendable {
  @objc final public let clickThroughUrl: Foundation.URL?
  @objc final public let clientType: BitmovinPlayerCore.AdSourceType
  @objc final public let indexInQueue: Swift.UInt
  @objc final public let duration: Foundation.TimeInterval
  @objc final public let timeOffset: Foundation.TimeInterval
  @objc final public let skipOffset: Foundation.TimeInterval
  @objc final public let position: Swift.String?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(clickThroughUrl: Foundation.URL?, clientType: BitmovinPlayerCore.AdSourceType, indexInQueue: Swift.UInt, duration: Foundation.TimeInterval, timeOffset: Foundation.TimeInterval, skipOffset: Foundation.TimeInterval, position: Swift.String?, ad: any BitmovinPlayerCore.Ad)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPAdQuartileHandler) public class _AdQuartileHandler : ObjectiveC.NSObject {
  @objc weak public var delegate: (any BitmovinPlayerCore._AdQuartileHandlerDelegate)?
  @objc override dynamic public init()
  @objc public func reset()
  @objc public func timeChanged(to currentTime: Foundation.TimeInterval, duration: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSeekedEvent) public class SeekedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDeficiencyService) public protocol _DeficiencyService {
  @objc(throwError:data:) func throwError(code: BitmovinPlayerCore.PlayerError.Code, data: BitmovinPlayerCore.DeficiencyData?)
  @objc func throwError(code: BitmovinPlayerCore.PlayerError.Code, message: Swift.String, data: BitmovinPlayerCore.DeficiencyData?)
  @objc(throwError:replacements:data:) func throwError(code: BitmovinPlayerCore.PlayerError.Code, replacements: [Swift.String]?, data: BitmovinPlayerCore.DeficiencyData?)
  @objc func buildWarningMessage(code: BitmovinPlayerCore.PlayerWarning.Code, replacements: [Swift.String]?) -> Swift.String?
}
extension Foundation.NSString {
  @objc dynamic public var bmp_md5: Foundation.NSString {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultEventSuppressor) public class _DefaultEventSuppressor : ObjectiveC.NSObject, BitmovinPlayerCore._EventSuppressor {
  @objc public func suppress(eventType: any BitmovinPlayerCore.Event.Type)
  @objc public func removeSuppression(eventType: any BitmovinPlayerCore.Event.Type)
  @objc public func isSuppressed(eventType: any BitmovinPlayerCore.Event.Type) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPSourceLatencyApi) @objcMembers public class SourceLatencyApi : ObjectiveC.NSObject {
  @objc public var automaticallyPreservesLatency: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var recommendedLatency: Foundation.TimeInterval {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_Concurrency.MainActor @objc(BMPPictureInPictureApi) public protocol PictureInPictureApi {
  @objc @available(tvOS, unavailable)
  @_Concurrency.MainActor var showSkipControls: Swift.Bool { get set }
}
@_inheritsConvenienceInitializers @objc(BMPUnmutedEvent) @objcMembers open class UnmutedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPCurrentSourceProvider) public protocol _CurrentSourceProvider {
  @objc var currentSource: (any BitmovinPlayerCore._LegacySourceInternal)? { get }
}
@_inheritsConvenienceInitializers @objc(BMPCastPlaybackFinishedEvent) @objcMembers open class CastPlaybackFinishedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPPlayerErrorEvent) public class PlayerErrorEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let code: BitmovinPlayerCore.PlayerError.Code
  @objc final public let message: Swift.String
  @objc final public let data: BitmovinPlayerCore.DeficiencyData?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(code: BitmovinPlayerCore.PlayerError.Code, message: Swift.String, data: BitmovinPlayerCore.DeficiencyData?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPContentLoaderDelegate) public protocol _ContentLoaderDelegate {
  @objc(contentLoader:didSucceedWithMetadata:data:) func contentLoader(_ loader: any BitmovinPlayerCore._ContentLoader, didSucceedWith requestMetadata: BitmovinPlayerCore._RequestMetadata, data: Foundation.Data)
  @objc(contentLoader:didFailWithMetadata:error:) func contentLoader(_ loader: any BitmovinPlayerCore._ContentLoader, didFailWith requestMetadata: BitmovinPlayerCore._RequestMetadata, error: any Swift.Error)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPMutedEvent) public class MutedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStyleConfig) final public class StyleConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public var isUiEnabled: Swift.Bool
  @objc final public var userInterfaceType: BitmovinPlayerCore.UserInterfaceType
  @objc final public var scalingMode: BitmovinPlayerCore.ScalingMode
  @objc final public var userInterfaceConfig: BitmovinPlayerCore.UserInterfaceConfig?
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPTimelineMarker) public protocol TimelineMarker : Swift.Sendable {
  @objc var time: Foundation.TimeInterval { get set }
  @objc var duration: Foundation.TimeInterval { get set }
}
@objcMembers @objc(BMPDaterangeMetadata) public class DaterangeMetadata : BitmovinPlayerCore.Metadata {
  @objc final public let identifier: Swift.String
  @objc final public let classLabel: Swift.String?
  @objc final public let startDate: Foundation.Date
  @objc final public let endDate: Foundation.Date?
  @objc public init(entries: [any BitmovinPlayerCore.MetadataEntry], identifier: Swift.String, classLabel: Swift.String?, start startDate: Foundation.Date, end endDate: Foundation.Date?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPDestroyEvent) public class DestroyEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS, deprecated: 15.0, message: "This is only useful when targeting iOS versions earlier than 15")
extension Foundation.URLSession {
  #if compiler(>=5.3) && $AsyncAwait
  public func data(from url: Foundation.URL) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func data(for request: Foundation.URLRequest) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
}
@objc(BMPSourceEvent) public protocol SourceEvent : BitmovinPlayerCore.Event {
}
@objc(BMPSourceEventHandler) public protocol SourceEventHandler {
  @objc(addListener:) func add(listener: any BitmovinPlayerCore.SourceListener)
  @objc(removeListener:) func remove(listener: any BitmovinPlayerCore.SourceListener)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPSubtitleChangedEvent) @objcMembers open class SubtitleChangedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let subtitleTrackOld: BitmovinPlayerCore.SubtitleTrack?
  @objc final public let subtitleTrackNew: BitmovinPlayerCore.SubtitleTrack?
  @objc public init(newSubtitleTrack: BitmovinPlayerCore.SubtitleTrack?, oldSubtitleTrack: BitmovinPlayerCore.SubtitleTrack?)
  @objc deinit
}
extension BitmovinPlayerCore.SubtitleChangedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@objc(_BMPGetAvailableAudioEvent) @objcMembers public class _GetAvailableAudioEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let audioTracks: [BitmovinPlayerCore.AudioTrack]
  @objc public init(audioTracks: [BitmovinPlayerCore.AudioTrack]?)
  @objc deinit
}
@objcMembers @objc(BMPAdErrorEvent) open class AdErrorEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let adItem: BitmovinPlayerCore.AdItem?
  @objc final public let code: Swift.Int
  @objc final public let message: Swift.String
  @objc final public let adConfig: (any BitmovinPlayerCore.AdConfig)?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(adItem: BitmovinPlayerCore.AdItem?, code: Swift.Int, message: Swift.String, adConfig: (any BitmovinPlayerCore.AdConfig)?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPCastStoppedEvent) @objcMembers open class CastStoppedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPPlaylistLoaderRetryHandler) public class _PlaylistLoaderRetryHandler : ObjectiveC.NSObject {
  @objc public var retryHttpRequestHandler: BitmovinPlayerCore.NetworkConfig.RetryHttpRequestHandler {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPBufferApiDelegate) public protocol _BufferApiDelegate {
  @objc(bufferApi_getLevel:) func bufferApi_getLevel(type: BitmovinPlayerCore.BufferType) -> BitmovinPlayerCore.BufferLevel
  @objc(bufferApi_setTargetLevel:) func bufferApi_setTargetLevel(value: Foundation.TimeInterval)
}
@objc(_BMPCafDrmConfigConvertible) public protocol _CafDrmConfigConvertible {
  @objc func toCafDrmConfig(remoteControlConfig: BitmovinPlayerCore.RemoteControlConfig) -> BitmovinPlayerCore._CafDrmConfig?
}
extension BitmovinPlayerCore.WidevineConfig : BitmovinPlayerCore._CafDrmConfigConvertible {
  @objc final public func toCafDrmConfig(remoteControlConfig: BitmovinPlayerCore.RemoteControlConfig) -> BitmovinPlayerCore._CafDrmConfig?
}
extension BitmovinPlayerCore.ClearKeyConfig : BitmovinPlayerCore._CafDrmConfigConvertible {
  @objc final public func toCafDrmConfig(remoteControlConfig: BitmovinPlayerCore.RemoteControlConfig) -> BitmovinPlayerCore._CafDrmConfig?
}
extension BitmovinPlayerCore.PlayReadyConfig : BitmovinPlayerCore._CafDrmConfigConvertible {
  @objc final public func toCafDrmConfig(remoteControlConfig: BitmovinPlayerCore.RemoteControlConfig) -> BitmovinPlayerCore._CafDrmConfig?
}
@objc(BMPLicenseValidatedEvent) @objcMembers open class LicenseValidatedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let data: BitmovinPlayerCore.LicenseData
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(data: BitmovinPlayerCore.LicenseData)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(_BMPInternalSharePlayStartedEvent) @objcMembers public class _InternalSharePlayStartedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPSeekPosition) public class SeekPosition : ObjectiveC.NSObject {
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc final public let time: Foundation.TimeInterval
  @objc public init(source: any BitmovinPlayerCore.Source, time: Foundation.TimeInterval)
  @objc deinit
}
@objc(_BMPStallingService) public protocol _StallingService {
  @objc var isStalling: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(tvOS, unavailable)
@objc(BMPCastWaitingForDeviceEvent) @objcMembers open class CastWaitingForDeviceEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public var castPayload: BitmovinPlayerCore.CastPayload {
    @objc get
  }
  @objc public init(deviceName: Swift.String, currentTime: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPDeficiencyData) public class DeficiencyData : ObjectiveC.NSObject {
  @objc final public let code: Swift.Int
  @objc final public let message: Swift.String
  @objc final public let underlyingError: Foundation.NSError?
  @objc convenience public init(error: any Swift.Error)
  convenience public init(error: any Swift.Error, code: Swift.Int?)
  @objc public init(code: Swift.Int, message: Swift.String, underlyingError: Foundation.NSError? = nil)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension BitmovinPlayerCore.DeficiencyData : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_hasMissingDesignatedInitializers @objc(BMPSourceMetadataChangedEvent) @objcMembers public class SourceMetadataChangedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let from: [Swift.String : Swift.AnyObject]?
  @objc final public let to: [Swift.String : Swift.AnyObject]?
  @objc convenience public init(oldMetadata: [Swift.String : Swift.AnyObject]?, newMetadata: [Swift.String : Swift.AnyObject]?)
  @objc deinit
}
@objcMembers @objc(BMPAudioTrack) public class AudioTrack : BitmovinPlayerCore.Track, @unchecked Swift.Sendable {
  @objc public var language: Swift.String? {
    get
  }
  @objc public init(label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?)
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPBufferService) public protocol _BufferService : BitmovinPlayerCore._Service {
  @objc func getLevel(_ type: BitmovinPlayerCore.BufferType) -> BitmovinPlayerCore.BufferLevel
  @objc func setTargetLevel(_ value: Foundation.TimeInterval)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPFullscreenEnterEvent) public class FullscreenEnterEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.FullscreenEnterEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 14.0, tvOS 14.0, *)
@objc(BMPSourceFactory) public class SourceFactory : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @available(*, deprecated, renamed: "createSource(from:)")
  @objc(createFrom:) public static func create(from sourceConfig: BitmovinPlayerCore.SourceConfig) -> any BitmovinPlayerCore.Source
  @objc(createSourceFrom:) public static func createSource(from sourceConfig: BitmovinPlayerCore.SourceConfig) -> any BitmovinPlayerCore.Source
  public static func _registerModuleFactories<T>(_ factory: @escaping (any BitmovinPlayerCore.Source) -> T) where T : BitmovinPlayerCore._SourceModule
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, deprecated, message: "Configuration for live streams has moved to the source-based `SourceLiveConfig`. Use `SourceConfig.liveConfig` instead.")
@objcMembers @objc(BMPLiveConfig) final public class LiveConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc @available(*, deprecated, message: "Configuration for live streams has moved to the source-based `SourceLiveConfig`. Use `SourceConfig.liveConfig.minTimeshiftBufferDepth` instead.")
  final public var minTimeshiftBufferDepth: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPCastStartEvent) @objcMembers open class CastStartEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPAdEvent) open class AdEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let ad: any BitmovinPlayerCore.Ad
  @objc public init(ad: any BitmovinPlayerCore.Ad)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPInternalAdPlaybackDidRequestContentPauseEvent) @objcMembers public class _InternalAdPlaybackDidRequestContentPauseEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let requestsUi: Swift.Bool
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(requestsUi: Swift.Bool)
  @objc deinit
}
@_Concurrency.MainActor @objc(BMPUserInterfaceEventHandler) public protocol UserInterfaceEventHandler : ObjectiveC.NSObjectProtocol {
  @objc(addUserInterfaceListener:) @_Concurrency.MainActor func add(listener: any BitmovinPlayerCore.UserInterfaceListener)
  @objc(removeUserInterfaceListener:) @_Concurrency.MainActor func remove(listener: any BitmovinPlayerCore.UserInterfaceListener)
}
@_hasMissingDesignatedInitializers @objc(BMPSourceAddedEvent) @objcMembers public class SourceAddedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(_BMPSubtitleParser) public protocol _SubtitleParser {
  @objc func parse(content: Swift.String, subtitleFormat: BitmovinPlayerCore.SubtitleFormat) throws -> [BitmovinPlayerCore.Cue]
}
@objcMembers @objc(BMPScalingModeChangedEvent) public class ScalingModeChangedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let from: BitmovinPlayerCore.ScalingMode
  @objc final public let to: BitmovinPlayerCore.ScalingMode
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc public init(from: BitmovinPlayerCore.ScalingMode, to: BitmovinPlayerCore.ScalingMode)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPCueParsedEvent) open class CueParsedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.CueEvent, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc public var startTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var endTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var text: Swift.String? {
    @objc get
  }
  @objc public var rawText: Swift.String? {
    @objc get
  }
  @objc public var attributedText: Foundation.NSAttributedString? {
    @objc get
  }
  @objc public var html: Swift.String? {
    @objc get
  }
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public var position: BitmovinPlayerCore.CuePosition? {
    @objc get
  }
  @objc public var region: Swift.String? {
    @objc get
  }
  @objc public var regionStyle: Swift.String? {
    @objc get
  }
  @objc public var vtt: BitmovinPlayerCore.VttProperties? {
    @objc get
  }
  @objc deinit
}
extension BitmovinPlayerCore.CueParsedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPAdQuartileEvent) @objcMembers open class AdQuartileEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let adQuartile: BitmovinPlayerCore.AdQuartile
  @objc public init(quartile: BitmovinPlayerCore.AdQuartile)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPEventSuppressor) public protocol _EventSuppressor {
  @objc func suppress(eventType: any BitmovinPlayerCore.Event.Type)
  @objc func removeSuppression(eventType: any BitmovinPlayerCore.Event.Type)
  @objc func isSuppressed(eventType: any BitmovinPlayerCore.Event.Type) -> Swift.Bool
}
extension AVFoundation.AVMetadataItem : BitmovinPlayerCore.MetadataEntry {
  @objc dynamic public var metadataType: BitmovinPlayerCore.MetadataType {
    @objc get
  }
}
@objcMembers @objc(BMPTrack) public class Track : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public let url: Foundation.URL?
  @objc public var isDefaultTrack: Swift.Bool {
    get
  }
  @objc public var label: Swift.String {
    get
  }
  @objc final public let identifier: Swift.String
  @objc final public let type: BitmovinPlayerCore.TrackType
  @objc public init(url: Foundation.URL?, trackType: BitmovinPlayerCore.TrackType, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool)
  @objc public func _updateLabel(to label: Swift.String)
  @objc deinit
}
extension BitmovinPlayerCore.Track : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension BitmovinPlayerCore.Track : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@available(*, deprecated, message: "Use HttpRequestType.drmLicenseFairplay instead")
public let BMPHttpRequestTypeDrmLicenseFairplay: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.drmCertificateFairplay instead")
public let BMPHttpRequestTypeDrmCertificateFairplay: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.mediaThumbnails instead")
public let BMPHttpRequestTypeMediaThumbnails: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.mediaSubtitles instead")
public let BMPHttpRequestTypeMediaSubtitles: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.manifestHlsMaster instead")
public let BMPHttpRequestTypeManifestHlsMaster: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.manifestHlsVariant instead")
public let BMPHttpRequestTypeManifestHlsVariant: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.keyHlsAes instead")
public let BMPHttpRequestTypeKeyHlsAes: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.unknown instead")
public let BMPHttpRequestTypeUnknown: Swift.String
@objc @_inheritsConvenienceInitializers public class PictureInPictureEnteredEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.PictureInPictureEnteredEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultDataWriter) public class _DefaultDataWriter : ObjectiveC.NSObject, BitmovinPlayerCore._DataWriter {
  @objc public func write(data: Foundation.Data, to url: Foundation.URL, options: Foundation.Data.WritingOptions) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPFairplayContentKeyRequest) @objcMembers public class FairplayContentKeyRequest : ObjectiveC.NSObject {
  @objc final public let skdUri: Swift.String
  @objc public init(skdUri: Swift.String, contentKeyRequest: AVFoundation.AVContentKeyRequest)
  @objc deinit
}
@available(tvOS, unavailable)
@objc(_BMPFairplayHandlerOfflineContentDelegate) public protocol _FairplayHandlerOfflineContentDelegate {
  @objc func fairplayHandler(_ sender: any BitmovinPlayerCore._FairplayHandler, shouldPersistOfflineLicenseForAssetId assetId: Swift.String) -> Swift.Bool
  @objc func fairplayHandler(_ sender: any BitmovinPlayerCore._FairplayHandler, isRenewingOfflineLicenseForAssetId assetId: Swift.String) -> Swift.Bool
  @objc func fairplayHandlerDidFinishPersistingOfflineLicenseInformation(_ sender: any BitmovinPlayerCore._FairplayHandler)
  @objc func fairplayHandlerDidPersistOfflineLicense(_ sender: any BitmovinPlayerCore._FairplayHandler)
  @objc func fairplayHandler(_ sender: any BitmovinPlayerCore._FairplayHandler, failedToPersistOfflineLicenseWithError error: any Swift.Error)
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalMasterPlaylistLoadedEvent) @objcMembers final public class _InternalMasterPlaylistLoadedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: Foundation.Data
  @objc final public let url: Foundation.URL
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdSkippedEvent) open class AdSkippedEvent : BitmovinPlayerCore.AdEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public init(ad: any BitmovinPlayerCore.Ad)
  @objc deinit
}
@objc(_BMPObjCLoggerService) public protocol _ObjCLoggerService {
  @objc func log(level: BitmovinPlayerCore.LogLevel, prefix: Swift.String?, message: Swift.String, code: Swift.Int, data: BitmovinPlayerCore.DeficiencyData?)
  @objc func log(level: BitmovinPlayerCore.LogLevel, prefix: Swift.String?, message: Swift.String, data: BitmovinPlayerCore.DeficiencyData?)
  @objc func logInternal(level: BitmovinPlayerCore.LogLevel, prefix: Swift.String?, message: Swift.String, code: Swift.Int, data: BitmovinPlayerCore.DeficiencyData?)
  @objc func logInternal(level: BitmovinPlayerCore.LogLevel, prefix: Swift.String?, message: Swift.String, data: BitmovinPlayerCore.DeficiencyData?)
  @objc func logEvent(_ event: any BitmovinPlayerCore.Event)
}
@objcMembers @objc(BMPTimeShiftEvent) public class TimeShiftEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let position: Foundation.TimeInterval
  @objc final public let target: Foundation.TimeInterval
  @objc final public let timeShift: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalCanStartPlaybackImmediatelyEvent) @objcMembers public class _InternalCanStartPlaybackImmediatelyEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStallStartedEvent) public class StallStartedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPPlayerListener) public protocol PlayerListener : ObjectiveC.NSObjectProtocol {
  @objc optional nonisolated func onReady(_ event: BitmovinPlayerCore.ReadyEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPlay(_ event: BitmovinPlayerCore.PlayEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPlaying(_ event: BitmovinPlayerCore.PlayingEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPaused(_ event: BitmovinPlayerCore.PausedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onTimeChanged(_ event: BitmovinPlayerCore.TimeChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onDurationChanged(_ event: BitmovinPlayerCore.DurationChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSeek(_ event: BitmovinPlayerCore.SeekEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSeeked(_ event: BitmovinPlayerCore.SeekedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onTimeShift(_ event: BitmovinPlayerCore.TimeShiftEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onTimeShifted(_ event: BitmovinPlayerCore.TimeShiftedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onDvrWindowExceeded(_ event: BitmovinPlayerCore.DvrWindowExceededEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onStallStarted(_ event: BitmovinPlayerCore.StallStartedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onStallEnded(_ event: BitmovinPlayerCore.StallEndedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onVideoSizeChanged(_ event: BitmovinPlayerCore.VideoSizeChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPlaybackFinished(_ event: BitmovinPlayerCore.PlaybackFinishedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPlayerError(_ event: BitmovinPlayerCore.PlayerErrorEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSourceError(_ event: BitmovinPlayerCore.SourceErrorEvent, player: any BitmovinPlayerCore.Player)
  @available(*, deprecated, message: "Warnings are now communicated through logs with level `.warning`. These logs are printed to the console by default. You can also access them by providing your own logger to `DebugConfig.logging.logger`\"")
  @objc optional nonisolated func onPlayerWarning(_ event: BitmovinPlayerCore.PlayerWarningEvent, player: any BitmovinPlayerCore.Player)
  @available(*, deprecated, message: "Warnings are now communicated through logs with level `.warning`. These logs are printed to the console by default. You can also access them by providing your own logger to `DebugConfig.logging.logger`\"")
  @objc optional nonisolated func onSourceWarning(_ event: BitmovinPlayerCore.SourceWarningEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSourceLoad(_ event: BitmovinPlayerCore.SourceLoadEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSourceLoaded(_ event: BitmovinPlayerCore.SourceLoadedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSourceUnload(_ event: BitmovinPlayerCore.SourceUnloadEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSourceUnloaded(_ event: BitmovinPlayerCore.SourceUnloadedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onDestroy(_ event: BitmovinPlayerCore.DestroyEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onMetadata(_ event: BitmovinPlayerCore.MetadataEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onMetadataParsed(_ event: BitmovinPlayerCore.MetadataParsedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCastAvailable(_ event: BitmovinPlayerCore.CastAvailableEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCastPaused(_ event: BitmovinPlayerCore.CastPausedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCastPlaybackFinished(_ event: BitmovinPlayerCore.CastPlaybackFinishedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCastPlaying(_ event: BitmovinPlayerCore.CastPlayingEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCastStarted(_ event: BitmovinPlayerCore.CastStartedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCastStart(_ event: BitmovinPlayerCore.CastStartEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCastStopped(_ event: BitmovinPlayerCore.CastStoppedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCastTimeUpdated(_ event: BitmovinPlayerCore.CastTimeUpdatedEvent, player: any BitmovinPlayerCore.Player)
  @available(tvOS, unavailable)
  @objc(onCastWaitingForDevice:player:) optional nonisolated func onCastWaiting(forDevice event: BitmovinPlayerCore.CastWaitingForDeviceEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCueParsed(_ event: BitmovinPlayerCore.CueParsedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCueEnter(_ event: BitmovinPlayerCore.CueEnterEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onCueExit(_ event: BitmovinPlayerCore.CueExitEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSubtitleAdded(_ event: BitmovinPlayerCore.SubtitleAddedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSubtitleRemoved(_ event: BitmovinPlayerCore.SubtitleRemovedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSubtitleChanged(_ event: BitmovinPlayerCore.SubtitleChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onMuted(_ event: BitmovinPlayerCore.MutedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onUnmuted(_ event: BitmovinPlayerCore.UnmutedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAudioAdded(_ event: BitmovinPlayerCore.AudioAddedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAudioRemoved(_ event: BitmovinPlayerCore.AudioRemovedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAudioChanged(_ event: BitmovinPlayerCore.AudioChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdStarted(_ event: BitmovinPlayerCore.AdStartedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdFinished(_ event: BitmovinPlayerCore.AdFinishedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdQuartile(_ event: BitmovinPlayerCore.AdQuartileEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdBreakStarted(_ event: BitmovinPlayerCore.AdBreakStartedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdBreakFinished(_ event: BitmovinPlayerCore.AdBreakFinishedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdScheduled(_ event: BitmovinPlayerCore.AdScheduledEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdSkipped(_ event: BitmovinPlayerCore.AdSkippedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdClicked(_ event: BitmovinPlayerCore.AdClickedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdError(_ event: BitmovinPlayerCore.AdErrorEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdManifestLoad(_ event: BitmovinPlayerCore.AdManifestLoadEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAdManifestLoaded(_ event: BitmovinPlayerCore.AdManifestLoadedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onVideoDownloadQualityChanged(_ event: BitmovinPlayerCore.VideoDownloadQualityChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onVideoPlaybackQualityChanged(_ event: BitmovinPlayerCore.VideoPlaybackQualityChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onDownloadFinished(_ event: BitmovinPlayerCore.DownloadFinishedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAirPlayChanged(_ event: BitmovinPlayerCore.AirPlayChangedEvent, player: any BitmovinPlayerCore.Player)
  @available(*, deprecated, renamed: "onAirPlayAvailabilityChanged(event:player:)")
  @objc optional nonisolated func onAirPlayAvailable(_ event: BitmovinPlayerCore.AirPlayAvailableEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onAirPlayAvailabilityChanged(_ event: BitmovinPlayerCore.AirPlayAvailabilityChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSourceMetadataChanged(_ event: BitmovinPlayerCore.SourceMetadataChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPlayerActive(_ event: BitmovinPlayerCore.PlayerActiveEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onDrmDataParsed(_ event: BitmovinPlayerCore.DrmDataParsedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPlayerInactive(_ event: BitmovinPlayerCore.PlayerInactiveEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPlaylistTransition(_ event: BitmovinPlayerCore.PlaylistTransitionEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onPlaybackSpeedChanged(_ event: BitmovinPlayerCore.PlaybackSpeedChangedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSourceAdded(_ event: BitmovinPlayerCore.SourceAddedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onSourceRemoved(_ event: BitmovinPlayerCore.SourceRemovedEvent, player: any BitmovinPlayerCore.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional nonisolated func onSharePlayStarted(_ event: BitmovinPlayerCore.SharePlayStartedEvent, player: any BitmovinPlayerCore.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional nonisolated func onSharePlayEnded(_ event: BitmovinPlayerCore.SharePlayEndedEvent, player: any BitmovinPlayerCore.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional nonisolated func onSharePlaySuspensionStarted(_ event: BitmovinPlayerCore.SharePlaySuspensionStartedEvent, player: any BitmovinPlayerCore.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional nonisolated func onSharePlaySuspensionEnded(_ event: BitmovinPlayerCore.SharePlaySuspensionEndedEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onEvent(_ event: any BitmovinPlayerCore.Event, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onOutputObscured(_ event: BitmovinPlayerCore.OutputObscuredEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onOutputUnobscured(_ event: BitmovinPlayerCore.OutputUnobscuredEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onFairplayLicenseAcquired(_ event: BitmovinPlayerCore.FairplayLicenseAcquiredEvent, player: any BitmovinPlayerCore.Player)
  @objc optional nonisolated func onLicenseValidated(_ event: BitmovinPlayerCore.LicenseValidatedEvent, player: any BitmovinPlayerCore.Player)
}
@available(*, deprecated, message: "Warnings are now communicated through logs with level `.warning`. These logs are printed to the console by default. You can also access them by providing your own logger to `DebugConfig.logging.logger`\"")
@objcMembers @objc(BMPPlayerWarningEvent) public class PlayerWarningEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let code: BitmovinPlayerCore.PlayerWarning.Code
  @objc final public let message: Swift.String
  @objc final public let data: BitmovinPlayerCore.DeficiencyData?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(code: BitmovinPlayerCore.PlayerWarning.Code, message: Swift.String, data: BitmovinPlayerCore.DeficiencyData?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @objcMembers public class _BMPSession : ObjectiveC.NSObject {
  @objc public static let shared: BitmovinPlayerCore._BMPSession
  @objc public static let sharedEphemeral: BitmovinPlayerCore._BMPSession
  @objc convenience public init(configuration: Foundation.URLSessionConfiguration = .default)
  @objc public func request(_ requestConfig: BitmovinPlayerCore._BMPRequestConfig) -> BitmovinPlayerCore._BMPDataRequest
  @objc public func cancelAll()
  @objc deinit
}
@objc @objcMembers public class _BMPRequestMetrics : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL
  @objc final public let redirectUrl: Foundation.URL?
  @objc final public let downloadTime: Foundation.TimeInterval
  @objc final public let httpStatus: Swift.Int
  @objc final public let responseSize: Swift.Int
  @objc final public let validationSuccessful: Swift.Bool
  @objc final public let error: (any Swift.Error)?
  @objc final public let retries: Swift.Int
  @objc public init(url: Foundation.URL, redirectUrl: Foundation.URL?, downloadTime: Foundation.TimeInterval, httpStatus: Swift.Int, responseSize: Swift.Int, validationSuccessful: Swift.Bool, error: (any Swift.Error)?, retries: Swift.Int)
  @objc public func toRequestMetadata(with type: BitmovinPlayerCore.HttpRequestType) -> BitmovinPlayerCore._RequestMetadata
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlaylistOptions) final public class PlaylistOptions : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public let preloadAllSources: Swift.Bool
  @objc final public let replayMode: BitmovinPlayerCore.ReplayMode
  @objc public init(preloadAllSources: Swift.Bool, replayMode: BitmovinPlayerCore.ReplayMode)
  @objc override convenience dynamic public init()
  @objc convenience public init(preloadAllSources: Swift.Bool)
  @objc convenience public init(replayMode: BitmovinPlayerCore.ReplayMode)
  @objc deinit
}
@objcMembers @objc(BMPSeekEvent) public class SeekEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let from: BitmovinPlayerCore.SeekPosition
  @objc final public let to: BitmovinPlayerCore.SeekPosition
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc(initWithFrom:to:) public init(from: BitmovinPlayerCore.SeekPosition, to: BitmovinPlayerCore.SeekPosition)
  @objc deinit
}
@objcMembers @objc(_BMPInternalTimeShiftEvent) final public class _InternalTimeShiftEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let position: Foundation.TimeInterval
  @objc final public let target: Foundation.TimeInterval
  @objc final public let timeShift: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInlinePlaylistDecryptionKeyStoreStrategy) public class _InlinePlaylistDecryptionKeyStoreStrategy : ObjectiveC.NSObject, BitmovinPlayerCore._PlaylistDecryptionKeyStoreStrategy {
  @objc public func uri(for keyUrl: Swift.String, decryptionKeyData keyData: Foundation.Data) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPCueEnterEvent) open class CueEnterEvent : BitmovinPlayerCore.PlayerEvent, BitmovinPlayerCore.CueEvent, @unchecked Swift.Sendable {
  @objc public var startTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var endTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var text: Swift.String? {
    @objc get
  }
  @objc public var rawText: Swift.String? {
    @objc get
  }
  @objc public var attributedText: Foundation.NSAttributedString? {
    @objc get
  }
  @objc public var html: Swift.String? {
    @objc get
  }
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public var position: BitmovinPlayerCore.CuePosition? {
    @objc get
  }
  @objc public var region: Swift.String? {
    @objc get
  }
  @objc public var regionStyle: Swift.String? {
    @objc get
  }
  @objc public var vtt: BitmovinPlayerCore.VttProperties? {
    @objc get
  }
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPPlaybackFinishedService) public protocol _PlaybackFinishedService {
  @objc var isPlaybackFinished: Swift.Bool { get }
}
@_hasMissingDesignatedInitializers @objc(_BMPDefaultEventEmitter) public class _DefaultEventEmitter : BitmovinPlayerCore._DefaultService {
  @objc final public let eventSuppressor: any BitmovinPlayerCore._EventSuppressor
  @objc override dynamic public var type: BitmovinPlayerCore._ServiceType {
    @objc get
  }
  @objc public func emit(event: BitmovinPlayerCore.PlayerEvent)
  @objc public func add(listener: any BitmovinPlayerCore.PlayerListener)
  @objc public func remove(listener: any BitmovinPlayerCore.PlayerListener)
  @objc deinit
}
extension BitmovinPlayerCore._DefaultEventEmitter : BitmovinPlayerCore._SourceEventEmitter {
  @objc dynamic public func emit(event: any BitmovinPlayerCore.SourceEvent, isInternal: Swift.Bool = false)
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPPlayerPlaylistApi) public class _PlayerPlaylistApi : ObjectiveC.NSObject, BitmovinPlayerCore.PlaylistApi {
  @objc weak public var delegate: (any BitmovinPlayerCore._PlaylistApiDelegate)?
  @objc public var sources: [any BitmovinPlayerCore.Source] {
    @objc get
  }
  @objc public func seek(source: any BitmovinPlayerCore.Source, time: Foundation.TimeInterval = 0)
  @objc public func add(source: any BitmovinPlayerCore.Source, at index: Swift.Int)
  @objc public func add(source: any BitmovinPlayerCore.Source)
  @objc public func remove(sourceAt index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPDefaultStopwatch) @objcMembers final public class _DefaultStopwatch : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore._DefaultStopwatch : BitmovinPlayerCore._Stopwatch {
  @objc final public func start()
  @objc final public func stop() -> Foundation.TimeInterval
}
@objc(BMPHttpResponse) @objcMembers final public class HttpResponse : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public let request: BitmovinPlayerCore.HttpRequest
  @objc final public let url: Foundation.URL
  @objc final public var status: Swift.Int
  @objc final public var headers: [Swift.String : Swift.String]
  @objc final public var body: Foundation.Data?
  @objc public init(request: BitmovinPlayerCore.HttpRequest, url: Foundation.URL, status: Swift.Int, headers: [Swift.String : Swift.String] = [:], body: Foundation.Data? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPScheduledAdItem) public class _ScheduledAdItem : ObjectiveC.NSObject {
  @objc final public let adItem: BitmovinPlayerCore.AdItem
  @objc public var eventLog: [BitmovinPlayerCore._ImaAdLogEvent] {
    get
  }
  @objc public var waterfallingIndex: Swift.Int {
    get
  }
  @objc public var currentStatus: BitmovinPlayerCore._ScheduledAdItemStatus {
    @objc get
    @objc set
  }
  @objc public var vmapAdBreakReady: Swift.Bool
  @objc public var vmapAdBreakError: Swift.Bool
  @objc public var numberOfAdsInAdBreak: Swift.UInt
  @objc public var adIndexInAdBreak: Swift.UInt
  @objc public var scheduleTimeOrNaN: Foundation.TimeInterval {
    @objc get
  }
  @objc public var mainContentDurationOrNaN: Foundation.TimeInterval {
    @objc get
  }
  @objc public var adBreak: (any BitmovinPlayerCore._MutableAdBreak)?
  @objc public var adConfig: (any BitmovinPlayerCore.AdConfig)?
  @objc public var currentAdSource: BitmovinPlayerCore.AdSource {
    @objc get
  }
  @objc convenience public init(adItem: BitmovinPlayerCore.AdItem)
  @objc(addStatusListener:) public func add(listener: any BitmovinPlayerCore._ScheduledAdItemStatusListener)
  @objc(removeStatusListener:) public func remove(listener: any BitmovinPlayerCore._ScheduledAdItemStatusListener)
  @objc(addEventLog:) public func add(imaAdLogEvent: BitmovinPlayerCore._ImaAdLogEvent)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlayerViewConfig) public class PlayerViewConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var pictureInPictureConfig: BitmovinPlayerCore.PictureInPictureConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDefaultAudioService) @objcMembers final public class _DefaultAudioService : BitmovinPlayerCore._DefaultService {
  @objc override final public var type: BitmovinPlayerCore._ServiceType {
    @objc get
  }
  @objc public init(currentSourceProvider: any BitmovinPlayerCore._CurrentSourceProvider)
  @objc deinit
}
extension BitmovinPlayerCore._DefaultAudioService : BitmovinPlayerCore._AudioService {
  @objc final public var availableAudio: [BitmovinPlayerCore.AudioTrack] {
    @objc get
  }
  @objc final public var audio: BitmovinPlayerCore.AudioTrack? {
    @objc get
  }
  @objc final public func setAudioWithIdentifier(_ audioTrackID: Swift.String)
}
@objcMembers @objc(_BMPDefaultInitializationService) public class _DefaultInitializationService : BitmovinPlayerCore._DefaultService, BitmovinPlayerCore._InitializationService {
  @objc public init(player: BitmovinPlayerCore._BMPAVPlayer)
  @objc public func setup(playerConfig: BitmovinPlayerCore.PlayerConfig)
  @objc deinit
}
extension BitmovinPlayerCore._DefaultInitializationService {
  @objc override dynamic public var type: BitmovinPlayerCore._ServiceType {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPFullscreenExitEvent) public class FullscreenExitEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.FullscreenExitEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(BMPConsoleLogger) public class ConsoleLogger : ObjectiveC.NSObject, BitmovinPlayerCore.Logger {
  @objc public var level: BitmovinPlayerCore.LogLevel
  @objc override convenience dynamic public init()
  @objc public func log(_ logEntry: BitmovinPlayerCore.LogEntry)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPReadyEvent) public class ReadyEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPPlaybackFinishedEvent) @objcMembers public class PlaybackFinishedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdBreakStartedEvent) open class AdBreakStartedEvent : BitmovinPlayerCore.AdBreakEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public init(adBreak: any BitmovinPlayerCore.AdBreak)
  @objc deinit
}
@objc(_BMPInternalSeekEvent) @objcMembers public class _InternalSeekEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let from: BitmovinPlayerCore.SeekPosition
  @objc final public let to: BitmovinPlayerCore.SeekPosition
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(from: BitmovinPlayerCore.SeekPosition, to: BitmovinPlayerCore.SeekPosition)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPControlsShowEvent) @objcMembers open class ControlsShowEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @objcMembers public class _BMPRequestConfigFactory : ObjectiveC.NSObject {
  @objc convenience public init(loggerService: any BitmovinPlayerCore._ObjCLoggerService)
  @objc public func create(url: Foundation.URL, type: BitmovinPlayerCore.HttpRequestType, networkConfig: BitmovinPlayerCore.NetworkConfig, eventEmitter: any BitmovinPlayerCore._SourceEventEmitter, enableFallbackRetryHandling: Swift.Bool) -> BitmovinPlayerCore._BMPRequestConfig
  @objc public func create(request: Foundation.URLRequest, type: BitmovinPlayerCore.HttpRequestType, networkConfig: BitmovinPlayerCore.NetworkConfig, onDownloadFinished: @escaping ((BitmovinPlayerCore._BMPRequestMetrics) -> Swift.Void)) -> BitmovinPlayerCore._BMPRequestConfig
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultTimerFactory) final public class _DefaultTimerFactory : ObjectiveC.NSObject, BitmovinPlayerCore._TimerFactory {
  @objc final public func create(timeInterval: Foundation.TimeInterval, eventHandlerQueue: Dispatch.DispatchQueue) -> any BitmovinPlayerCore._Timer
  @objc final public func create(timeInterval: Foundation.TimeInterval, timerQueue: Dispatch.DispatchQueue, eventHandlerQueue: Dispatch.DispatchQueue) -> any BitmovinPlayerCore._Timer
  @objc final public func createAndStart(timeInterval: Foundation.TimeInterval, repeats: Swift.Bool, eventHandlerQueue: Dispatch.DispatchQueue, eventHandler: @escaping () -> Swift.Void) -> any BitmovinPlayerCore._Timer
  @objc final public func createAndStart(timeInterval: Foundation.TimeInterval, repeats: Swift.Bool, timerQueue: Dispatch.DispatchQueue, eventHandlerQueue: Dispatch.DispatchQueue, eventHandler: @escaping () -> Swift.Void) -> any BitmovinPlayerCore._Timer
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPCastStartedEvent) @objcMembers open class CastStartedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let deviceName: Swift.String
  @objc public init(deviceName: Swift.String)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlayEndedEvent) @objcMembers public class SharePlayEndedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalTimeChangedEvent) @objcMembers final public class _InternalTimeChangedEvent : BitmovinPlayerCore.TimeChangedEvent, @unchecked Swift.Sendable {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override public init(currentTime: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPControlsHideEvent) @objcMembers open class ControlsHideEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPThumbnailTrack) public class ThumbnailTrack : BitmovinPlayerCore.Track, @unchecked Swift.Sendable {
  @objc public init(url: Foundation.URL, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool)
  @objc deinit
}
@objc(BMPVideoPlaybackQualityChangedEvent) @objcMembers public class VideoPlaybackQualityChangedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let videoQualityOld: BitmovinPlayerCore.VideoQuality?
  @objc final public let videoQualityNew: BitmovinPlayerCore.VideoQuality
  @objc public init(videoQualityOld: BitmovinPlayerCore.VideoQuality?, videoQualityNew: BitmovinPlayerCore.VideoQuality)
  @objc deinit
}
@objc(_BMPPlaylistManipulator) public protocol _PlaylistManipulator {
  @objc func replace(decryptionKeyUrl keyUrl: Swift.String, with keyData: Foundation.Data, in playlist: Swift.String, decryptionKeyStoreStrategy keyStoreStrategy: any BitmovinPlayerCore._PlaylistDecryptionKeyStoreStrategy) -> Swift.String
  @objc(replaceManifestUrl:withCustomUrl:in:) func replace(manifestUrl url: Swift.String, with customUrl: Swift.String, in playlist: Swift.String) -> Swift.String
}
@objc(_BMPRemotePlayerStateEvent) @objcMembers public class _RemotePlayerStateEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let remotePlayerState: BitmovinPlayerCore._RemotePlayerState
  @objc public init(remotePlayerState: BitmovinPlayerCore._RemotePlayerState)
  @objc deinit
}
@objcMembers @objc(BMPAudioRemovedEvent) public class AudioRemovedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let audioTrack: BitmovinPlayerCore.AudioTrack
  @objc final public let time: Foundation.TimeInterval
  @objc public init(audioTrack: BitmovinPlayerCore.AudioTrack, time: Foundation.TimeInterval)
  @objc deinit
}
extension BitmovinPlayerCore.AudioRemovedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlaybackConfig) public class PlaybackConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var isAutoplayEnabled: Swift.Bool
  @objc public var isMuted: Swift.Bool
  @objc public var isTimeShiftEnabled: Swift.Bool
  @objc public var isBackgroundPlaybackEnabled: Swift.Bool
  @objc @available(*, deprecated, message: "Use `PlayerViewConfig.PictureInPictureConfig.isEnabled` instead")
  public var isPictureInPictureEnabled: Swift.Bool
  @objc public var isForcedSubtitleCallback: ((BitmovinPlayerCore.SubtitleTrack) -> Swift.Bool)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalTimeShiftedEvent) final public class _InternalTimeShiftedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPWidevineConfig) final public class WidevineConfig : BitmovinPlayerCore.DrmConfig, @unchecked Swift.Sendable {
  @objc final public var licenseRequestHeaders: [Swift.String : Swift.String]
  @objc final public var licenseRequestRetryDelay: Swift.UInt
  @objc final public var maxLicenseRequestRetries: Swift.UInt
  @objc final public var mediaKeySystemConfig: Swift.String?
  @objc(initWithLicenseUrl:) public init(license licenseUrl: Foundation.URL?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPImaAdvertisingConfig) public class ImaAdvertisingConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc @available(tvOS, unavailable)
  public var adAttributionUiMode: BitmovinPlayerCore.ImaAdAttributionUiMode {
    @objc get
    @objc set
  }
  @objc @available(tvOS, unavailable)
  public var preferredUiType: BitmovinPlayerCore.ImaUiType {
    @objc get
    @objc set
  }
  @objc @available(tvOS, unavailable)
  public var shouldPauseOnTap: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdBreakFinishedEvent) open class AdBreakFinishedEvent : BitmovinPlayerCore.AdBreakEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public init(adBreak: any BitmovinPlayerCore.AdBreak)
  @objc deinit
}
@objc(BMPAdSourceType) public enum AdSourceType : Swift.Int {
  case none = 0
  case ima
  case unknown
  case progressive
  case bitmovin
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPDefaultDeficiencyService) final public class _DefaultDeficiencyService : BitmovinPlayerCore._DefaultService, BitmovinPlayerCore._DeficiencyService {
  @objc override final public var type: BitmovinPlayerCore._ServiceType {
    @objc get
  }
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func throwError(code: BitmovinPlayerCore.PlayerError.Code, data: BitmovinPlayerCore.DeficiencyData?)
  @objc final public func throwError(code: BitmovinPlayerCore.PlayerError.Code, message: Swift.String, data: BitmovinPlayerCore.DeficiencyData?)
  @objc final public func throwError(code: BitmovinPlayerCore.PlayerError.Code, replacements: [Swift.String]?, data: BitmovinPlayerCore.DeficiencyData?)
  @objc final public func buildWarningMessage(code: BitmovinPlayerCore.PlayerWarning.Code, replacements: [Swift.String]?) -> Swift.String?
  @objc deinit
}
@objc(_BMPErrorMetadata) @objcMembers final public class _ErrorMetadata : ObjectiveC.NSObject {
  @objc final public let error: Foundation.NSError
  @objc final public let requestMetadata: BitmovinPlayerCore._RequestMetadata?
  @objc public init(error: Foundation.NSError, requestMetadata: BitmovinPlayerCore._RequestMetadata? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlayerInactiveEvent) public class PlayerInactiveEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPInternalPlayingEvent) final public class _InternalPlayingEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPGoogleCastBufferService) public class _GoogleCastBufferService : BitmovinPlayerCore._DefaultService {
  @objc override dynamic public var type: BitmovinPlayerCore._ServiceType {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore._GoogleCastBufferService : BitmovinPlayerCore._BufferService {
  @objc dynamic public func getLevel(_ type: BitmovinPlayerCore.BufferType) -> BitmovinPlayerCore.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
@objc(_BMPDataReader) public protocol _DataReader {
  @objc func read(contentsOf url: Foundation.URL) throws -> Foundation.Data
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdaptationConfig) public class AdaptationConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var maxSelectableBitrate: Swift.UInt
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPictureInPictureConfig) public class PictureInPictureConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  public typealias RestoreUserInterfaceHandler = (_ completionHandler: @escaping (_ restored: Swift.Bool) -> Swift.Void) -> Swift.Void
  @objc public var isEnabled: Swift.Bool
  @objc @available(tvOS, unavailable)
  public var showSkipControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(iOS 14.2, *)
  @available(tvOS, unavailable)
  public var shouldEnterOnBackground: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var restoreUserInterfaceHandler: BitmovinPlayerCore.PictureInPictureConfig.RestoreUserInterfaceHandler?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPSourceModulesApi) public class _SourceModulesApi : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore._SourceModulesApi {
  public func _registerModule(_ factory: (any BitmovinPlayerCore.Source) -> any BitmovinPlayerCore._SourceModule)
  public func _unregisterModule<T>(_ type: T.Type) where T : BitmovinPlayerCore._SourceModule
  public func _module<T>(_ type: T.Type) -> T? where T : BitmovinPlayerCore._SourceModule
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPLatencyApi) public class LatencyApi : ObjectiveC.NSObject {
  @objc weak public var _delegate: (any BitmovinPlayerCore._LatencyApiDelegate)?
  @objc public var currentLatency: Foundation.TimeInterval {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPObjCPlayerEventEmitter) public protocol _ObjCPlayerEventEmitter : BitmovinPlayerCore.PlayerEventHandler, BitmovinPlayerCore._Service {
  @objc var eventSuppressor: any BitmovinPlayerCore._EventSuppressor { get }
  @objc(emitPlayerEvent:) func emit(event: BitmovinPlayerCore.PlayerEvent)
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, tvOS 14.0, *)
public class PlayerFactory : @unchecked Swift.Sendable {
  public static var sdkVersion: Swift.String {
    get
  }
  @available(*, deprecated, renamed: "createPlayer(playerConfig:)", message: "Use createPlayer(playerConfig:) instead. In case of standalone Player Core usage, update to PlayerCoreFactory.createPlayer(playerConfig:)")
  public static func create(playerConfig: BitmovinPlayerCore.PlayerConfig = PlayerConfig()) -> any BitmovinPlayerCore.Player
  public static func _registerModuleFactories<T>(_ factory: @escaping (any BitmovinPlayerCore.Player) -> T) where T : BitmovinPlayerCore._PlayerModule
  @objc deinit
}
@objc(BMPVastMacroContext) @objcMembers public class VastMacroContext : ObjectiveC.NSObject {
  @objc final public let scope: BitmovinPlayerCore.VastMacroScope
  @objc public init(scope: BitmovinPlayerCore.VastMacroScope)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(_BMPDefaultSubtitleParser) public class _DefaultSubtitleParser : ObjectiveC.NSObject, BitmovinPlayerCore._SubtitleParser {
  @objc override convenience dynamic public init()
  @objc public func parse(content: Swift.String, subtitleFormat: BitmovinPlayerCore.SubtitleFormat) throws -> [BitmovinPlayerCore.Cue]
  @objc deinit
}
@objc(BMPImaUiType) public enum ImaUiType : Swift.Int {
  case disabled
  case ima
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPPlayerBufferApi) public class _PlayerBufferApi : ObjectiveC.NSObject {
  @objc weak public var delegate: (any BitmovinPlayerCore._BufferApiDelegate)?
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore._PlayerBufferApi : BitmovinPlayerCore.BufferApi {
  @objc dynamic public func getLevel(_ type: BitmovinPlayerCore.BufferType) -> BitmovinPlayerCore.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
@objcMembers @objc(BMPPlaybackSpeedChangedEvent) public class PlaybackSpeedChangedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let from: Swift.Float
  @objc final public let to: Swift.Float
  @objc public init(from: Swift.Float, to: Swift.Float)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultPlaylistUrlTracker) public class _DefaultPlaylistUrlTracker : ObjectiveC.NSObject, BitmovinPlayerCore._PlaylistUrlTracker {
  @objc override dynamic public init()
  @objc public func register(url: Foundation.URL, type: BitmovinPlayerCore.HttpRequestType)
  @objc public func type(url: Foundation.URL) -> BitmovinPlayerCore.HttpRequestType
  @objc deinit
}
@objc(BMPLogLevel) public enum LogLevel : Swift.Int {
  case verbose = -1
  case info = 0
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BitmovinPlayerCore.LogLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PictureInPictureEnterEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.PictureInPictureEnterEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_hasMissingDesignatedInitializers @objc(BMPVttLine) @objcMembers final public class VttLine : ObjectiveC.NSObject {
  @objc final public let type: BitmovinPlayerCore.VttLineValueType
  @objc final public let value: Swift.Double
  @objc public static func _create(type: BitmovinPlayerCore.VttLineValueType, value: Swift.Double) -> BitmovinPlayerCore.VttLine
  @objc deinit
}
extension BitmovinPlayerCore.VttLine : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(BMPVastMacroScope) public enum VastMacroScope : Swift.Int {
  case requestUri
  case tracking
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPScheduledAdItemStatusListener) public protocol _ScheduledAdItemStatusListener {
  @objc func scheduledAdItem(_ scheduledAdItem: BitmovinPlayerCore._ScheduledAdItem, didChangeToNewStatus newStatus: BitmovinPlayerCore._ScheduledAdItemStatus, oldStatus: BitmovinPlayerCore._ScheduledAdItemStatus)
}
@objc(BMPMetadataEntry) public protocol MetadataEntry {
  @objc var metadataType: BitmovinPlayerCore.MetadataType { get }
}
@objc(BMPLoadingState) public enum LoadingState : Swift.Int {
  case unloaded
  case loading
  case loaded
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @available(*, deprecated, renamed: "AirPlayAvailabilityChangedEvent(allowsAirPlay:)")
@objcMembers @objc(BMPAirPlayAvailableEvent) public class AirPlayAvailableEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPCafDrmConfig) @objcMembers final public class _CafDrmConfig : ObjectiveC.NSObject {
  public enum ProtectionSystem : Swift.String {
    case widevine
    case playReady
    case clearKey
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(protectionSystem: BitmovinPlayerCore._CafDrmConfig.ProtectionSystem, licenseUrl: Foundation.URL, headers: [Swift.String : Swift.String]?, withCredentials: Swift.Bool)
  @objc deinit
}
extension BitmovinPlayerCore._CafDrmConfig : BitmovinPlayerCore._JsonEncodable {
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc final public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPUserInterfaceConfig) public class UserInterfaceConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPPlayingEvent) public class PlayingEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let time: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPSourceErrorEvent) public class SourceErrorEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let code: BitmovinPlayerCore.SourceError.Code
  @objc final public let message: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: BitmovinPlayerCore.DeficiencyData?
  @objc public init(code: BitmovinPlayerCore.SourceError.Code, message: Swift.String, data: BitmovinPlayerCore.DeficiencyData?)
  @objc deinit
}
extension BitmovinPlayerCore.SourceErrorEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
extension Swift.String {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
extension Foundation.NSString {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(BMPPlayerConfig) @objcMembers final public class PlayerConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public var key: Swift.String?
  @objc final public var styleConfig: BitmovinPlayerCore.StyleConfig
  @objc final public var playbackConfig: BitmovinPlayerCore.PlaybackConfig
  @objc final public var advertisingConfig: BitmovinPlayerCore.AdvertisingConfig
  @objc @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  final public var remoteControlConfig: BitmovinPlayerCore.RemoteControlConfig {
    @objc get
    @objc set
  }
  @objc final public var adaptationConfig: BitmovinPlayerCore.AdaptationConfig
  @objc final public var networkConfig: BitmovinPlayerCore.NetworkConfig
  @objc final public var tweaksConfig: BitmovinPlayerCore.TweaksConfig
  @objc final public var bufferConfig: BitmovinPlayerCore.BufferConfig
  @objc @available(*, deprecated, message: "Configuration for live streams has moved to the source-based `SourceLiveConfig`. Use `SourceConfig.liveConfig` instead.\"")
  final public var liveConfig: BitmovinPlayerCore.LiveConfig
  @objc final public var nowPlayingConfig: BitmovinPlayerCore.NowPlayingConfig
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPAudioChangedEvent) public class AudioChangedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let audioTrackOld: BitmovinPlayerCore.AudioTrack?
  @objc final public let audioTrackNew: BitmovinPlayerCore.AudioTrack
  @objc public init(newAudioTrack: BitmovinPlayerCore.AudioTrack, oldAudioTrack: BitmovinPlayerCore.AudioTrack?)
  @objc deinit
}
extension BitmovinPlayerCore.AudioChangedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objc(_BMPLatencyApiDelegate) public protocol _LatencyApiDelegate {
  @objc var latencyApi_currentLatency: Foundation.TimeInterval { get }
}
@objc(_BMPPlaylistSourcesProvider) public protocol _PlaylistSourcesProvider {
  @objc var sources: [any BitmovinPlayerCore._LegacySourceInternal] { get }
  @objc func isLastSource(_ source: any BitmovinPlayerCore._LegacySourceInternal) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPOutputObscuredEvent) public class OutputObscuredEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPMetadataMessage) @objcMembers final public class _MetadataMessage : ObjectiveC.NSObject, BitmovinPlayerCore._JsonEncodable {
  @objc public init(data: [Swift.AnyHashable : Any])
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc final public func _toJsonString() throws -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPDrmDataParsedEvent) @objcMembers public class DrmDataParsedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: BitmovinPlayerCore.DrmData
  @objc final public let name: Swift.String
  @objc public init(data: BitmovinPlayerCore.DrmData)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalPlaylistTransitionEvent) public class _InternalPlaylistTransitionEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let from: (any BitmovinPlayerCore.Source)?
  @objc final public let to: (any BitmovinPlayerCore.Source)?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(BMPDrmData) @objcMembers final public class DrmData : ObjectiveC.NSObject {
  @objc(BMPDrmDataType) public enum DrmDataType : Swift.Int {
    case skdUri
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let data: Foundation.Data
  @objc final public let type: BitmovinPlayerCore.DrmData.DrmDataType
  @objc public init(data: Foundation.Data, type: BitmovinPlayerCore.DrmData.DrmDataType)
  @objc convenience public init?(skdUri: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPDrmRequest) @objcMembers final public class DrmRequest : BitmovinPlayerCore.HttpRequest, @unchecked Swift.Sendable {
  @objc final public let drmData: BitmovinPlayerCore.DrmData
  @objc deinit
}
@objcMembers @objc(BMPPausedEvent) public class PausedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let time: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlaySuspensionEndedEvent) @objcMembers public class SharePlaySuspensionEndedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let suspension: any BitmovinPlayerCore.SharePlaySuspension
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc extension Foundation.NSURLRequest {
  @objc dynamic public func _toBitmovinHttpRequest() -> BitmovinPlayerCore.HttpRequest?
  @objc dynamic public func _toBitmovinDrmRequest(skdUri: Swift.String) -> BitmovinPlayerCore.DrmRequest?
}
@objc(BMPDurationChangedEvent) @objcMembers public class DurationChangedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let duration: Foundation.TimeInterval
  @objc convenience public init(duration: Foundation.TimeInterval)
  @objc public init(duration: Foundation.TimeInterval, timestamp: Foundation.TimeInterval)
  @objc deinit
}
extension BitmovinPlayerCore.DurationChangedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objc(_BMPConfigService) public protocol _ConfigService {
  @objc var licenseKey: Swift.String? { get }
  @objc var sdkVersion: Swift.String { get }
  @objc var packageName: Swift.String? { get }
  @objc var playerConfig: BitmovinPlayerCore.PlayerConfig { get }
  @objc var suppressDefaultCaptionRendering: Swift.Bool { get }
}
@objc(_BMPPlaylistDecryptionKeyStoreStrategy) public protocol _PlaylistDecryptionKeyStoreStrategy : ObjectiveC.NSObjectProtocol {
  @objc func uri(for keyUrl: Swift.String, decryptionKeyData keyData: Foundation.Data) -> Swift.String?
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlaySuspensionStartedEvent) @objcMembers public class SharePlaySuspensionStartedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let suspension: any BitmovinPlayerCore.SharePlaySuspension
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(_BMPImaAdLogEvent) public class _ImaAdLogEvent : ObjectiveC.NSObject {
  @objc final public let errorCode: Swift.Int
  @objc final public let errorMessage: Swift.String
  @objc final public let type: Swift.String
  @objc public init(errorCode: Swift.Int, errorMessage: Swift.String, type: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultHttpResponseFactory) public class _DefaultHttpResponseFactory : ObjectiveC.NSObject, BitmovinPlayerCore._HttpResponseFactory {
  @objc public func create(response: Foundation.HTTPURLResponse, request: BitmovinPlayerCore.HttpRequest, body: Foundation.Data?) -> BitmovinPlayerCore.HttpResponse
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPRequestMetadata) @objcMembers public class _RequestMetadata : ObjectiveC.NSObject {
  @objc public var downloadType: BitmovinPlayerCore.HttpRequestType
  @objc final public let url: Foundation.URL
  @objc public var redirectUrl: Foundation.URL?
  @objc public var downloadTime: Swift.Double
  @objc public var httpStatus: Swift.Int
  @objc public var size: Swift.Int
  @objc public var wasSuccessful: Swift.Bool
  @objc public var isLocalResource: Swift.Bool {
    @objc get
  }
  @objc public init(downloadType: BitmovinPlayerCore.HttpRequestType, url: Foundation.URL)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPSourceDrmFairplayApi) @objcMembers public class SourceDrmFairplayApi : ObjectiveC.NSObject {
  @objc public func renewExpiringLicense(for contentKeyRequest: BitmovinPlayerCore.FairplayContentKeyRequest)
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPImaAdsManager) public protocol ImaAdsManager : Swift.Sendable {
  @objc var adCuePoints: [Foundation.TimeInterval] { get }
  @objc func clicked()
  @objc func discardAdBreak()
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPOutputUnobscuredEvent) public class OutputUnobscuredEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPLoggerServiceFactory) @objcMembers public class _LoggerServiceFactory : ObjectiveC.NSObject {
  @objc public func createObjCForOffline() -> any BitmovinPlayerCore._ObjCLoggerService
  @objc public func createObjCForCastManager() -> any BitmovinPlayerCore._ObjCLoggerService
  @objc override dynamic public init()
  @objc deinit
}
@objc extension BitmovinPlayerCore.DownloadFinishedEvent {
  @objc convenience dynamic public init(requestMetadata: BitmovinPlayerCore._RequestMetadata)
}
@_inheritsConvenienceInitializers @objc(BMPVastMacroConfig) @objcMembers public class VastMacroConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  public typealias VastMacroValueProvider = (_ macro: BitmovinPlayerCore.VastMacro, _ context: BitmovinPlayerCore.VastMacroContext) -> [Swift.String]
  @objc public var valueProvider: BitmovinPlayerCore.VastMacroConfig.VastMacroValueProvider?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPTimeShiftedEvent) public class TimeShiftedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPDownloadFinishedEvent) @objcMembers public class DownloadFinishedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let requestType: BitmovinPlayerCore.HttpRequestType
  @objc @available(*, deprecated, message: "Use requestType instead")
  public var downloadType: Swift.String {
    @objc get
  }
  @objc final public let url: Foundation.URL
  @objc final public let lastRedirectLocation: Foundation.URL?
  @objc final public let downloadTime: Foundation.TimeInterval
  @objc final public let httpStatus: Swift.UInt
  @objc final public let size: Swift.UInt
  @objc public var successful: Swift.Bool {
    @objc get
  }
  @objc final public let wasSuccessful: Swift.Bool
  @objc convenience public init(requestType: BitmovinPlayerCore.HttpRequestType, url: Foundation.URL, downloadTime: Foundation.TimeInterval, httpStatus: Swift.UInt, size: Swift.UInt, success: Swift.Bool, lastRedirectLocation: Foundation.URL?)
  @objc deinit
}
@objc(_BMPAdQuartileHandlerDelegate) public protocol _AdQuartileHandlerDelegate {
  @objc func adQuartileHandler(_ adQuartileHandler: BitmovinPlayerCore._AdQuartileHandler, didReach adQuartile: BitmovinPlayerCore.AdQuartile)
}
@_inheritsConvenienceInitializers @objc(BMPLinearAdUiConfig) @objcMembers public class LinearAdUiConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var requestsUi: Swift.Bool
  @objc public var message: Swift.String?
  @objc public var untilSkippableMessage: Swift.String?
  @objc public var skippableMessage: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.LinearAdUiConfig : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPVideoSizeChangedEvent) open class VideoSizeChangedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(_BMPInternalSharePlayEndedEvent) @objcMembers public class _InternalSharePlayEndedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPInternalPlaybackInitiatedEvent) @objcMembers final public class _InternalPlaybackInitiatedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPVttCue) @objcMembers public class _VttCue : ObjectiveC.NSObject {
  @objc final public let index: Swift.Int
  @objc final public let start: Foundation.TimeInterval
  @objc final public let end: Foundation.TimeInterval
  @objc final public let bitmovinAttributedText: Foundation.NSAttributedString
  @objc final public let uiKitAttributedText: Foundation.NSAttributedString
  @objc final public let rawText: Swift.String
  @objc final public let settings: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public init(index: Swift.Int, start: Foundation.TimeInterval, end: Foundation.TimeInterval, bitmovinAttributedText: Foundation.NSAttributedString, uiKitAttributedText: Foundation.NSAttributedString, rawText: Swift.String, settings: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultDataReader) public class _DefaultDataReader : ObjectiveC.NSObject, BitmovinPlayerCore._DataReader {
  @objc public func read(contentsOf url: Foundation.URL) throws -> Foundation.Data
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalCastReadyEvent) final public class _InternalCastReadyEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPLogEntry) @objcMembers final public class LogEntry : ObjectiveC.NSObject {
  @objc final public let message: Swift.String
  @objc final public let level: BitmovinPlayerCore.LogLevel
  final public var code: Swift.Int?
  @objc final public let sender: Swift.String
  @objc final public let data: BitmovinPlayerCore.DeficiencyData?
  @objc final public let currentDate: Foundation.Date
  public init(message: Swift.String, level: BitmovinPlayerCore.LogLevel, code: Swift.Int? = nil, sender: Swift.String, data: BitmovinPlayerCore.DeficiencyData? = nil, currentDate: Foundation.Date = Date())
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPBufferConfig) public class BufferConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var audioAndVideo: BitmovinPlayerCore.BufferMediaTypeConfig
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor @objc(BMPPlayerViewEventsApi) public class PlayerViewEventsApi : ObjectiveC.NSObject {
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayerCore.PlayerViewEventsApi {
  @_Concurrency.MainActor public func on<T>(_ eventType: T.Type) -> Combine.AnyPublisher<T, Swift.Never> where T : BitmovinPlayerCore.PlayerViewEvent
}
@objc(BMPAnalyticsLicenseData) @objcMembers public class AnalyticsLicenseData : ObjectiveC.NSObject {
  @objc final public let key: Swift.String?
  @objc public init(key: Swift.String? = nil)
  @objc deinit
}
@objc(_BMPDataWriter) public protocol _DataWriter {
  @objc func write(data: Foundation.Data, to url: Foundation.URL, options: Foundation.Data.WritingOptions) throws
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalCastPlaylistTransitionEvent) public class _InternalCastPlaylistTransitionEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let from: (any BitmovinPlayerCore.Source)?
  @objc final public let to: (any BitmovinPlayerCore.Source)?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(BMPReplayMode) public enum ReplayMode : Swift.Int {
  case lastSource
  case playlist
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(BMPAirPlayAvailabilityChangedEvent) public class AirPlayAvailabilityChangedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let allowsAirPlay: Swift.Bool
  @objc public init(allowsAirPlay: Swift.Bool)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPThumbnailsApi) public class ThumbnailsApi : ObjectiveC.NSObject {
  @objc weak public var _delegate: (any BitmovinPlayerCore._ThumbnailsApiDelegate)?
  @objc public func thumbnail(forTime time: Foundation.TimeInterval) -> BitmovinPlayerCore.Thumbnail?
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPFairplayHandlerDelegate) public protocol _FairplayHandlerDelegate {
  @objc(fairplayHandlerDidFinishLicenseRequest:) optional func fairplayHandlerDidFinishLicenseRequest(_ sender: any BitmovinPlayerCore._FairplayHandler)
  @objc(fairplayHandlerDidFinishCertificateRequest:) optional func fairplayHandlerDidFinishCertificateRequest(_ sender: any BitmovinPlayerCore._FairplayHandler)
  @objc(fairplayHandler:didFinishWithErrorMetadata:) optional func fairplayHandler(_ sender: any BitmovinPlayerCore._FairplayHandler, didFinishWith errorMetadata: BitmovinPlayerCore._ErrorMetadata)
  @objc(fairplayHandler:didAcquireLicenseForSkdUri:contentKeyRequest:) optional func fairplayHandler(_ sender: any BitmovinPlayerCore._FairplayHandler, didAcquireLicenseFor skdUri: Swift.String, contentKeyRequest: AVFoundation.AVContentKeyRequest)
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalSourceAddedEvent) @objcMembers public class _InternalSourceAddedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let source: any BitmovinPlayerCore.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalCastActiveSourceChangedEvent) final public class _InternalCastActiveSourceChangedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc final public let from: (any BitmovinPlayerCore._LegacySourceInternal)?
  @objc final public let to: (any BitmovinPlayerCore._LegacySourceInternal)?
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPVttProperties) @objcMembers final public class VttProperties : ObjectiveC.NSObject {
  @objc final public let vertical: BitmovinPlayerCore.VttVertical
  @objc final public let line: BitmovinPlayerCore.VttLine
  @objc final public let lineAlign: BitmovinPlayerCore.VttLineAlign
  @objc final public let snapToLines: Swift.Bool
  @objc final public let size: Swift.Double
  @objc final public let align: BitmovinPlayerCore.VttAlign
  @objc final public let position: BitmovinPlayerCore.VttPosition
  @objc final public let positionAlign: BitmovinPlayerCore.VttPositionAlign
  @objc public static func _create(vertical: BitmovinPlayerCore.VttVertical, line: BitmovinPlayerCore.VttLine, lineAlign: BitmovinPlayerCore.VttLineAlign, snapToLines: Swift.Bool, size: Swift.Double, align: BitmovinPlayerCore.VttAlign, position: BitmovinPlayerCore.VttPosition, positionAlign: BitmovinPlayerCore.VttPositionAlign) -> BitmovinPlayerCore.VttProperties
  @objc deinit
}
extension BitmovinPlayerCore.VttProperties : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension BitmovinPlayerCore.VttProperties : BitmovinPlayerCore._JsonEncodable {
  @objc final public func _toJsonString() throws -> Swift.String
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPNowPlayingConfig) public class NowPlayingConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var isNowPlayingInfoEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalCastStopEvent) final public class _InternalCastStopEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPVastMacro) public class VastMacro : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  final public let name: Swift.String
  final public let values: [Swift.String]
  public init(name: Swift.String, values: [Swift.String])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPCastTimeUpdatedEvent) @objcMembers open class CastTimeUpdatedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let currentTime: Foundation.TimeInterval
  @objc final public let duration: Foundation.TimeInterval
  @objc public init(currentTime: Foundation.TimeInterval, duration: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(BMPUserInterfaceApi) @_Concurrency.MainActor public protocol UserInterfaceApi : ObjectiveC.NSObjectProtocol {
  @objc @_Concurrency.MainActor var isFullscreen: Swift.Bool { get }
  @objc @_Concurrency.MainActor var areControlsShown: Swift.Bool { get }
  @objc @_Concurrency.MainActor var isPictureInPictureAvailable: Swift.Bool { get }
  @objc @_Concurrency.MainActor var isPictureInPicture: Swift.Bool { get }
  @objc @_Concurrency.MainActor var scalingMode: BitmovinPlayerCore.ScalingMode { get set }
  @objc @_Concurrency.MainActor func enterPictureInPicture()
  @objc @_Concurrency.MainActor func exitPictureInPicture()
  @objc @_Concurrency.MainActor func enterFullscreen()
  @objc @_Concurrency.MainActor func exitFullscreen()
  @objc(setPosterImage:keepPersistent:) @_Concurrency.MainActor func setPosterImage(url: Foundation.URL, keepPersistent: Swift.Bool)
  @objc @_Concurrency.MainActor func setSubtitleStyles(_ subtitleStyles: [AVFoundation.AVTextStyleRule]?)
}
@objc(BMPEvent) public protocol Event : ObjectiveC.NSObjectProtocol, Swift.Sendable {
  @objc var name: Swift.String { get }
  @objc var timestamp: Foundation.TimeInterval { get }
}
@objc(_BMPFairplayHandler) public protocol _FairplayHandler {
  @objc var fairplayConfig: BitmovinPlayerCore.FairplayConfig { get set }
  @objc weak var fairplayHandlerDelegate: (any BitmovinPlayerCore._FairplayHandlerDelegate)? { get set }
  @objc @available(tvOS, unavailable)
  weak var offlineContentDelegate: (any BitmovinPlayerCore._FairplayHandlerOfflineContentDelegate)? { get set }
  @objc(addRecipient:) func add(recipient: any AVFoundation.AVContentKeyRecipient)
  @objc @available(tvOS, unavailable)
  func syncLicense(forSkdUri skdUri: Swift.String)
  @objc @available(tvOS, unavailable)
  func renewLicense(forSkdUri skdUri: Swift.String)
  @objc func renewLicense(for contentKeyRequest: BitmovinPlayerCore.FairplayContentKeyRequest)
}
@objc(_BMPHttpResponseFactory) public protocol _HttpResponseFactory {
  @objc func create(response: Foundation.HTTPURLResponse, request: BitmovinPlayerCore.HttpRequest, body: Foundation.Data?) -> BitmovinPlayerCore.HttpResponse
}
@objc(BMPSubtitleFormat) public enum SubtitleFormat : Swift.Int {
  case webVtt
  case ttml
  case cea
  case srt
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BitmovinPlayerCore.SubtitleFormat : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc(_BMPAdLoaderDelegate) public protocol _AdLoaderDelegate {
  @objc(adLoader:willStartLoadingScheduledAdItem:) func adLoader(_ adLoader: any BitmovinPlayerCore._AdLoader, willStartLoading: BitmovinPlayerCore._ScheduledAdItem)
  @objc(adLoader:didFinishLoadingScheduledAdItem:downloadDuration:) func adLoader(_ adLoader: any BitmovinPlayerCore._AdLoader, didFinishLoading: BitmovinPlayerCore._ScheduledAdItem, downloadDuration: Foundation.TimeInterval)
  @objc(adLoader:didFailLoadingScheduledAdItem:adConfig:error:) func adLoader(_ adLoader: any BitmovinPlayerCore._AdLoader, didFailLoading: BitmovinPlayerCore._ScheduledAdItem?, adConfig: (any BitmovinPlayerCore.AdConfig)?, error: any Swift.Error)
}
@objc(_BMPOfflineFairplayLicenseStorage) public protocol _OfflineFairplayLicenseStorage {
  @objc func license(forAssetId assetId: Swift.String) -> Foundation.Data?
  @objc func persist(license licenseData: Foundation.Data, forAssetId assetId: Swift.String, isRenewing: Swift.Bool) throws
  @objc func licenseInformation(forAssetId assetId: Swift.String) -> BitmovinPlayerCore.DrmLicenseInformation?
  @objc @discardableResult
  func persist(licenseInformation: BitmovinPlayerCore.DrmLicenseInformation, forAssetId assetId: Swift.String) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(BMPDebugConfig) final public class DebugConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public static var logging: BitmovinPlayerCore.LoggingConfig {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(_BMPStopwatch) public protocol _Stopwatch {
  @objc func start()
  @objc func stop() -> Foundation.TimeInterval
}
@_inheritsConvenienceInitializers @objc(_BMPEnumHelper) @objcMembers public class _EnumHelper : ObjectiveC.NSObject {
  @objc public static func adSourceTypeToString(_ type: BitmovinPlayerCore.AdSourceType) -> Swift.String
  @objc public static func sourceTypeToString(_ sourceType: BitmovinPlayerCore.SourceType) -> Swift.String
  @objc public static func timelineReferencePointToString(_ timelineReference: BitmovinPlayerCore.TimelineReferencePoint) -> Swift.String
  @objc public static func adQuartileToPercentage(_ quartile: BitmovinPlayerCore.AdQuartile) -> Swift.Double
  @objc public static func adTagTypeToString(_ type: BitmovinPlayerCore.AdTagType) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@available(tvOS, unavailable)
@objc(BMPCastPayload) @objcMembers final public class CastPayload : ObjectiveC.NSObject {
  @objc final public let currentTime: Foundation.TimeInterval
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let deviceName: Swift.String
  @objc final public let type: Swift.String
  @objc public init(deviceName: Swift.String, currentTime: Foundation.TimeInterval, timestamp: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultFairplayHandlerFactory) public class _DefaultFairplayHandlerFactory : ObjectiveC.NSObject, BitmovinPlayerCore._FairplayHandlerFactory {
  @objc public func create(fairplayConfig: BitmovinPlayerCore.FairplayConfig, networkConfig: BitmovinPlayerCore.NetworkConfig?, offlineLicenseStorage: (any BitmovinPlayerCore._OfflineFairplayLicenseStorage)?, loggerService: any BitmovinPlayerCore._ObjCLoggerService, sourceEventEmitter: (any BitmovinPlayerCore._SourceEventEmitter)?) -> any BitmovinPlayerCore._FairplayHandler
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalStallEndedEvent) public class _InternalStallEndedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPFairplayHandlerFactory) public protocol _FairplayHandlerFactory {
  @objc func create(fairplayConfig: BitmovinPlayerCore.FairplayConfig, networkConfig: BitmovinPlayerCore.NetworkConfig?, offlineLicenseStorage: (any BitmovinPlayerCore._OfflineFairplayLicenseStorage)?, loggerService: any BitmovinPlayerCore._ObjCLoggerService, sourceEventEmitter: (any BitmovinPlayerCore._SourceEventEmitter)?) -> any BitmovinPlayerCore._FairplayHandler
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(_BMPWebVttParser) public class _WebVttParser : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc(parseFromContent:error:) public func parse(content: Swift.String) throws -> [BitmovinPlayerCore._VttCue]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPDvrWindowExceededEvent) @objcMembers open class DvrWindowExceededEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPSubtitleRemovedEvent) @objcMembers open class SubtitleRemovedEvent : ObjectiveC.NSObject, BitmovinPlayerCore.SourceEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let subtitleTrack: BitmovinPlayerCore.SubtitleTrack
  @objc public init(subtitleTrack: BitmovinPlayerCore.SubtitleTrack)
  @objc deinit
}
extension BitmovinPlayerCore.SubtitleRemovedEvent : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @objc(BMPCastAvailableEvent) @objcMembers open class CastAvailableEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPAdSource) @objcMembers public class AdSource : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  public enum DefaultValues {
    public static let vastLoadTimeout: Swift.Double
    public static let videoLoadTimeout: Swift.Double
  }
  @objc final public let type: BitmovinPlayerCore.AdSourceType
  @objc final public let tag: Foundation.URL
  @objc final public let vastLoadTimeout: Foundation.TimeInterval
  @objc final public let videoLoadTimeout: Foundation.TimeInterval
  @objc convenience public init(tag: Foundation.URL, ofType type: BitmovinPlayerCore.AdSourceType)
  @objc convenience public init(tag: Foundation.URL, ofType type: BitmovinPlayerCore.AdSourceType, vastLoadTimeout: Foundation.TimeInterval)
  @objc public init(tag: Foundation.URL, ofType type: BitmovinPlayerCore.AdSourceType, vastLoadTimeout: Foundation.TimeInterval = DefaultValues.vastLoadTimeout, videoLoadTimeout: Foundation.TimeInterval = DefaultValues.videoLoadTimeout)
  @objc deinit
}
extension BitmovinPlayerCore.AdSource : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objcMembers @objc(BMPFairplayConfig) public class FairplayConfig : BitmovinPlayerCore.DrmConfig, @unchecked Swift.Sendable {
  @objc public var certificateUrl: Foundation.URL?
  @objc public var licenseRequestHeaders: [Swift.String : Swift.String]?
  @objc public var certificateRequestHeaders: [Swift.String : Swift.String]?
  @objc public var prepareMessage: ((_ spcData: Foundation.Data, _ assetID: Swift.String) -> Foundation.Data)?
  @objc public var prepareContentId: ((_ contentId: Swift.String) -> Swift.String)?
  @objc public var prepareCertificate: ((_ certificate: Foundation.Data) -> Foundation.Data)?
  @objc public var prepareLicense: ((_ ckc: Foundation.Data) -> Foundation.Data)?
  @objc public var prepareLicenseServerUrl: ((_ licenseServerUrl: Swift.String) -> Swift.String)?
  @objc public var prepareOfflineDrmLicenseInformation: ((_ data: Foundation.Data) -> BitmovinPlayerCore.DrmLicenseInformation)?
  @objc public var prepareSyncMessage: ((_ syncSpcData: Foundation.Data, _ assetID: Swift.String) -> Foundation.Data)?
  @objc @available(tvOS, unavailable)
  public var provideLicenseData: ((_ assetId: Swift.String) -> Foundation.Data?)? {
    @objc get
    @objc set
  }
  @objc @available(tvOS, unavailable)
  public var persistLicenseData: ((_ assetId: Swift.String, _ licenseData: Foundation.Data) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc(initWithLicenseUrl:certificateURL:) public init(license licenseUrl: Foundation.URL?, certificateURL: Foundation.URL)
  @objc convenience public init(certificateURL certificateUrl: Foundation.URL)
  @objc @available(tvOS, unavailable)
  public init(provideLicenseDataCallback: @escaping (_ assetId: Swift.String) -> Foundation.Data?)
  @objc deinit
}
@objcMembers @objc(BMPClearKeyConfig) final public class ClearKeyConfig : BitmovinPlayerCore.DrmConfig, @unchecked Swift.Sendable {
  @objc final public var decryptionKeys: [BitmovinPlayerCore.DecryptionKey]
  @objc public init(decryptionKeys: [BitmovinPlayerCore.DecryptionKey])
  @objc deinit
}
@objcMembers @objc(BMPDecryptionKey) final public class DecryptionKey : ObjectiveC.NSObject, Foundation.NSCopying, @unchecked Swift.Sendable {
  @objc final public var kid: Swift.String?
  @objc final public var key: Swift.String
  @objc public init(kid: Swift.String?, key: Swift.String)
  @objc final public func copy(with zone: ObjectiveC.NSZone?) -> Any
  @objc deinit
}
extension BitmovinPlayerCore.DecryptionKey : BitmovinPlayerCore._JsonEncodable {
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc final public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @objc(BMPAdvertisingConfig) @objcMembers public class AdvertisingConfig : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public var schedule: [BitmovinPlayerCore.AdItem]
  @objc @available(visionOS, unavailable)
  public var onAdsManagerAvailable: ((any BitmovinPlayerCore.ImaAdsManager) -> Swift.Void)?
  @objc @available(visionOS, unavailable)
  public var beforeInitialization: ((BitmovinPlayerCore.ImaSettings) -> Swift.Void)?
  @objc @available(visionOS, unavailable)
  public var ima: BitmovinPlayerCore.ImaAdvertisingConfig
  @objc public var shouldLoadAdItem: (BitmovinPlayerCore.AdItem) -> Swift.Bool
  @objc public var bitmovin: BitmovinPlayerCore.BitmovinAdvertisingConfig
  @objc override convenience dynamic public init()
  @objc public init(schedule: [BitmovinPlayerCore.AdItem])
  @objc deinit
}
extension BitmovinPlayerCore._BMPAVPlayerItem {
  @objc dynamic public var timebaseEffectiveRate: Swift.Float {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPDrmSystems) final public class DrmSystems : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public static let fairplayUUID: Foundation.UUID
  @objc public static let widevineUUID: Foundation.UUID
  @objc public static let playReadyUUID: Foundation.UUID
  @objc public static let clearKeyUUID: Foundation.UUID
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalPlaybackIntentionEvent) @objcMembers public class _InternalPlaybackIntentionEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(_BMPOfflineThumbnailHelper) public class _OfflineThumbnailHelper : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc public func prepareThumbnailsForOfflineUsage(_ thumbnails: [BitmovinPlayerCore.Thumbnail]) -> [BitmovinPlayerCore.Thumbnail]
  @objc public func swapUrls(_ urls: [Swift.String : Foundation.URL], for thumbnails: [BitmovinPlayerCore.Thumbnail]) -> [BitmovinPlayerCore.Thumbnail]
  @objc public func distinctImageUrlsAndTheirLocalEquivalent(for thumbnails: [BitmovinPlayerCore.Thumbnail], offlineDirectory: Foundation.URL) -> [Swift.String : Foundation.URL]
  @objc deinit
}
@objcMembers @objc(BMPTimelineMarkerEnterEvent) public class TimelineMarkerEnterEvent : ObjectiveC.NSObject, BitmovinPlayerCore.PlayerViewEvent, @unchecked Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let timelineMarker: any BitmovinPlayerCore.TimelineMarker
  @objc public init(timelineMarker: any BitmovinPlayerCore.TimelineMarker)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalPlayerLoadEvent) @objcMembers final public class _InternalPlayerLoadEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalPlayerUnloadEvent) @objcMembers final public class _InternalPlayerUnloadEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalPlayerFactory) public class _InternalPlayerFactory : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc override convenience dynamic public init()
  @objc public func create(integrationLanguage: BitmovinPlayerCore._IntegrationLanguage, config: BitmovinPlayerCore.PlayerConfig) -> any BitmovinPlayerCore.Player
  @objc public func create(integrationLanguage: BitmovinPlayerCore._IntegrationLanguage) -> any BitmovinPlayerCore.Player
  @objc deinit
}
@objc(_BMPThumbnailsApiDelegate) public protocol _ThumbnailsApiDelegate {
  @objc func thumbnailsApi_thumbnail(forTime time: Foundation.TimeInterval) -> BitmovinPlayerCore.Thumbnail?
}
@objcMembers @objc(BMPQuality) public class Quality : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let label: Swift.String
  @objc final public let bitrate: Swift.UInt
  @objc final public let codec: Swift.String?
  @objc public init(identifier: Swift.String, label: Swift.String, bitrate: Swift.UInt, codec: Swift.String?)
  @objc deinit
}
extension BitmovinPlayerCore.Quality : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objcMembers @objc(BMPVideoQuality) public class VideoQuality : BitmovinPlayerCore.Quality {
  @objc final public let width: Swift.UInt
  @objc final public let height: Swift.UInt
  @objc public init(identifier: Swift.String, label: Swift.String, bitrate: Swift.UInt, codec: Swift.String?, width: Swift.UInt, height: Swift.UInt)
  @objc deinit
}
extension BitmovinPlayerCore.VideoQuality {
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@objcMembers @objc(BMPCuePosition) public class CuePosition : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc final public let column: Swift.Int
  @objc final public let row: Swift.Int
  @objc public init(column: Swift.Int, row: Swift.Int)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension BitmovinPlayerCore.CuePosition : BitmovinPlayerCore._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlayStartedEvent) @objcMembers public class SharePlayStartedEvent : BitmovinPlayerCore.PlayerEvent, @unchecked Swift.Sendable {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_Concurrency.MainActor @objc(BMPSystemUiApi) public protocol SystemUiApi {
  @objc @available(tvOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor var transportBarCustomMenuItems: [UIKit.UIMenuElement] { get set }
  @objc @available(tvOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor var contextualActions: [UIKit.UIAction] { get set }
  @objc @available(tvOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor var infoViewActions: [UIKit.UIAction] { get set }
  @objc @available(tvOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor var customInfoViewControllers: [UIKit.UIViewController] { get set }
}
@_inheritsConvenienceInitializers @objc(BMPSharePlayApi) public class SharePlayApi : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 15.0, tvOS 15.0, *)
extension BitmovinPlayerCore.SharePlayApi {
  public var suspensionReasons: [AVFoundation.AVCoordinatedPlaybackSuspension.Reason] {
    get
  }
  public var isInGroupSession: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public func coordinate<T>(with groupSession: GroupActivities.GroupSession<T>) where T : GroupActivities.GroupActivity
  public func beginSuspension(for suspensionReason: AVFoundation.AVCoordinatedPlaybackSuspension.Reason) -> any BitmovinPlayerCore.SharePlaySuspension
  public func endSuspension(_ suspension: any BitmovinPlayerCore.SharePlaySuspension)
  public func endSuspension(_ suspension: any BitmovinPlayerCore.SharePlaySuspension, proposingNewTime newTime: Foundation.TimeInterval)
}
@objc(_BMPAVPlayerItemListener) public protocol _AVPlayerItemListener : ObjectiveC.NSObjectProtocol {
  @objc(playerItem:didChangeStatus:newStatus:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didChange oldStatus: AVFoundation.AVPlayerItem.Status, newStatus: AVFoundation.AVPlayerItem.Status)
  @objc(playerItem:didChangeDuration:newDuration:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didChangeDuration oldDuration: CoreMedia.CMTime, newDuration: CoreMedia.CMTime)
  @objc(playerItem:didChangePlaybackBufferEmpty:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didChangePlaybackBufferEmpty playbackBufferEmpty: Swift.Bool)
  @objc(playerItem:didChangePlaybackLikelyToKeepUp:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didChangePlaybackLikelyToKeepUp playbackLikelyToKeepUp: Swift.Bool)
  @objc(playerItemDidPlayToEnd:) optional func playerItemDidPlayToEnd(playerItem: BitmovinPlayerCore._BMPAVPlayerItem)
  @objc(playerItem:didFailToPlayToEnd:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didFailToPlayToEnd error: (any Swift.Error)?)
  @objc(playerItemDidReceiveNewAccessLogEntry:) optional func playerItemDidReceiveNewAccessLogEntry(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem)
  @objc(playerItem:willSeekToTargetTime:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, willSeekToTargetTime seekTarget: CoreMedia.CMTime)
  @objc(playerItem:willSeekToTargetDate:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, willSeekToTargetDate seekTarget: Foundation.Date)
  @objc(playerItem:didSeekWithSuccess:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didSeekWithSuccess finished: Swift.Bool)
  @objc(playerItem:didChangeLoadedTimeRanges:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didChangeLoadedTimeRanges loadedTimeRanges: [Foundation.NSValue])
  @objc(playerItem:didChangeSeekableTimeRanges:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didChangeSeekableTimeRanges seekableTimeRanges: [Foundation.NSValue])
  @objc(playerItem:didChangePresentationSize:newPresentationSize:) optional func playerItem(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem, didChangePresentationSize oldPresentationSize: CoreFoundation.CGSize, newPresentationSize: CoreFoundation.CGSize)
  @objc(playerItemDidChangeMediaSelection:) optional func playerItemDidChangeMediaSelection(_ playerItem: BitmovinPlayerCore._BMPAVPlayerItem)
}
extension BitmovinPlayerCore.MetadataType : Swift.Equatable {}
extension BitmovinPlayerCore.MetadataType : Swift.Hashable {}
extension BitmovinPlayerCore.MetadataType : Swift.RawRepresentable {}
@available(iOS 15.0, tvOS 15.0, *)
extension AVFoundation.AVCoordinatedPlaybackSuspension : BitmovinPlayerCore.SharePlaySuspension {}
extension BitmovinPlayerCore.UnstallingBehaviour : Swift.Equatable {}
extension BitmovinPlayerCore.UnstallingBehaviour : Swift.Hashable {}
extension BitmovinPlayerCore.UnstallingBehaviour : Swift.RawRepresentable {}
extension BitmovinPlayerCore.TrackType : Swift.Equatable {}
extension BitmovinPlayerCore.TrackType : Swift.Hashable {}
extension BitmovinPlayerCore.TrackType : Swift.RawRepresentable {}
extension BitmovinPlayerCore.UserInterfaceType : Swift.Equatable {}
extension BitmovinPlayerCore.UserInterfaceType : Swift.Hashable {}
extension BitmovinPlayerCore.UserInterfaceType : Swift.RawRepresentable {}
extension BitmovinPlayerCore.RemoteControlType : Swift.Equatable {}
extension BitmovinPlayerCore.RemoteControlType : Swift.Hashable {}
extension BitmovinPlayerCore.RemoteControlType : Swift.RawRepresentable {}
extension BitmovinPlayerCore._ScheduledAdItemStatus : Swift.Equatable {}
extension BitmovinPlayerCore._ScheduledAdItemStatus : Swift.Hashable {}
extension BitmovinPlayerCore._ScheduledAdItemStatus : Swift.RawRepresentable {}
extension BitmovinPlayerCore.PlaybackStartBehaviour : Swift.Equatable {}
extension BitmovinPlayerCore.PlaybackStartBehaviour : Swift.Hashable {}
extension BitmovinPlayerCore.PlaybackStartBehaviour : Swift.RawRepresentable {}
extension BitmovinPlayerCore.SourceType : Swift.Equatable {}
extension BitmovinPlayerCore.SourceType : Swift.Hashable {}
extension BitmovinPlayerCore.SourceType : Swift.RawRepresentable {}
extension BitmovinPlayerCore._DefaultEventEmitter : BitmovinPlayerCore.PlayerEventHandler {}
extension BitmovinPlayerCore._DefaultEventEmitter : BitmovinPlayerCore._ObjCPlayerEventEmitter {}
extension BitmovinPlayerCore.AdSourceType : Swift.Equatable {}
extension BitmovinPlayerCore.AdSourceType : Swift.Hashable {}
extension BitmovinPlayerCore.AdSourceType : Swift.RawRepresentable {}
extension BitmovinPlayerCore.ImaUiType : Swift.Equatable {}
extension BitmovinPlayerCore.ImaUiType : Swift.Hashable {}
extension BitmovinPlayerCore.ImaUiType : Swift.RawRepresentable {}
extension BitmovinPlayerCore.LogLevel : Swift.Equatable {}
extension BitmovinPlayerCore.LogLevel : Swift.Hashable {}
extension BitmovinPlayerCore.LogLevel : Swift.RawRepresentable {}
extension BitmovinPlayerCore.VastMacroScope : Swift.Equatable {}
extension BitmovinPlayerCore.VastMacroScope : Swift.Hashable {}
extension BitmovinPlayerCore.VastMacroScope : Swift.RawRepresentable {}
extension BitmovinPlayerCore.LoadingState : Swift.Equatable {}
extension BitmovinPlayerCore.LoadingState : Swift.Hashable {}
extension BitmovinPlayerCore.LoadingState : Swift.RawRepresentable {}
extension BitmovinPlayerCore._CafDrmConfig.ProtectionSystem : Swift.Equatable {}
extension BitmovinPlayerCore._CafDrmConfig.ProtectionSystem : Swift.Hashable {}
extension BitmovinPlayerCore._CafDrmConfig.ProtectionSystem : Swift.RawRepresentable {}
extension BitmovinPlayerCore.DrmData.DrmDataType : Swift.Equatable {}
extension BitmovinPlayerCore.DrmData.DrmDataType : Swift.Hashable {}
extension BitmovinPlayerCore.DrmData.DrmDataType : Swift.RawRepresentable {}
extension BitmovinPlayerCore.PlayerViewEventsApi : Swift.Sendable {}
extension BitmovinPlayerCore.ReplayMode : Swift.Equatable {}
extension BitmovinPlayerCore.ReplayMode : Swift.Hashable {}
extension BitmovinPlayerCore.ReplayMode : Swift.RawRepresentable {}
extension BitmovinPlayerCore.SubtitleFormat : Swift.Equatable {}
extension BitmovinPlayerCore.SubtitleFormat : Swift.Hashable {}
extension BitmovinPlayerCore.SubtitleFormat : Swift.RawRepresentable {}
